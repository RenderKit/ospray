/*!
  \mainpage OSPRay - A Open, Scalable, and Portable Rendering Framework for Vis Applications

  \section intro Introduction

  OSPRay is a open, scalable, and portable ray-tracing based rendering
  framework particularly designed for vis-type applications.

  <dl>
  
  <dt>Open</dt>

  <dd>OSPRay is _open_ in the sense that it is available in open
  source, and particularly designed to be easily extensible.</dd>

  <dt>Scalable</dt>

  <dd>OSPRay is _scalable_ in the sense that is designed to scale in
  supported data size from small, local data to massively large data
  that require data-parallel processing in large machines; to scale
  from rendering on a laptop to rendering on a multi-node
  supercomputer; to scale in image quality from typical "vis-like"
  shading to "photo-realistic" rendering (where applicable); and to
  scale in application from a single OpenGL equivalent for local
  rendering to a complete data-parallel rendering "service" where
  applicable.

  <dt>Portable</dt>

  <dd>OSPray is supposed to be _portable_ across a wide range of
  compute architectures and instruction sets; from laptops to
  supercomputers; from CPUs to many-core accelerators; and across a
  wide range of ISAs. To achieve this OSPRay will is built around
  three major components: ISA-independent C++ for all "high-level"
  systems aspects; the Intel SPMD Program Compiler (ISPC) for
  platform- and ISA-independent coding of high-performance kernels;
  and MPI for communication across different nodes;

  </dl>
  
  \section components OSPRay Components

  OSPRay consists of three main components: the OSPray library itself
  (located in the 'ospray' directory); a number of demand-loadable
  modules (see \ref ospray_modules) that allow to extend ospray's functionality in a
  plug-and-play manner; and a set of sample applications (in the
  'apps' directory) that show how OSPray (and/or the modules) are
  used. These apps often build around some common


  \section embree Dependence on Embree

  OSPRay build on top of the Embree ray tracing kernels. To build
  OSPray, you have to have a version of Embree checked out as
  well. CMake will automatically look for a source version of embree
  in the same directory in which OSPray is located. You do not have to
  build embree itself; OSPray will include all relevant parts
  individually. This version of OSPray requires Embree off the
  embree github repo (see https://github.com/embree/embree); currently
  tested version of Embree is Embree 2.3.

  \section building Building OSPray

  To build OSPRay, first create a build directory (say, 'bin'), then
  cd to this directory, and use cmake ("cmake ..") to configure this
  build directory. "make" should build all code components (library
  and sample apps); "make doc" builds the doxygen documentation (the
  one you are currently reading). Preferred configuration is to use
  the Intel C Compiler as well as Intel MPI.

  \section apps Sample Applications

  OSPRay comes with a set of sample viewer applications. 
  \see ospray_apps_ospModelViewer
  \see ospray_apps_ospParticleViewer
  \see ospray_apps 
 */
