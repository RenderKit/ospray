/*! \page frame_buffer_handling How Frame Buffers work

  How frame buffers behave depends on from where one views them: from the viewpoint of an application, or from within ospray.

  \section fb_external FrameBuffers viewed through the public OSPRay API

  seem through the public ospray api (ie, from the view of an
  application) frame buffers behave like a "swap chain" in that a
  frame buffer can actually be multi-bufferened (one buffer to write
  to, another one to map for display). Frame buffers can not be
  resized (only destroyed and newly created) and may be automatically
  refcounted - ie, a call to ospFrameBufferDestroy only unlinks the
  frame buffer, but may not immediately destroy it (in case there's
  some data still incoming for one of the back buffers).

  From the point of the application frame buffers can only be
  created/destroyed, and can be *read* via mapping their host-side
  content. the application can not write to the frame buffer.

  one key concept of frame buffers (as seen through the api) is that
  the *app-side* representation of a frame buffer can be different
  from the device-side representation. Ie, though the frame buffer on
  the host is one contigiuous buffer of a given format specified by
  the ospFrameBufferCreate call, the ospray backend may actually use a
  different representation for its frame buffer, and may in fact use a
  frame buffer that's physically distributed across multiple
  nodes. Unless explicitly specified to the contrary the ospray engine
  may also use compression when transferring a frame buffer (even
  lossy compression if not specified otherwise) - all it guarantees is
  that the application can map the frame buffer (on the frontend
  machine) in the given format it has specified during creation. In
  particular, it should be possible to create frame buffers that the
  host will *never* map, and that therefore may never ever be
  assembled together on any given node (neither *inside* a possibly
  remotely running ospray MPI group, nor on the host. (a good example
  of that would be a distributed frame buffer used for driving a giant
  display wall: each node may render part of that frame buffer, but
  each node will send its own local data to whatever display needs it,
  without any single node ever assembling the whole thing (which would
  create a giant bottleneck))

  \section fb_internal FrameBuffers viewed from internal ospray classes

  While FrameBuffers are essentially "swap chains" from the API's
  point of view, internally each frame buffer is just a single frame
  buffer with given data for a single frame, in a given format. Frame
  Buffers are refcounted, so any render job modifying a frame buffer
  will only get a single pointer to a singel refcounted frame
  buffer. During rendering a render job can use virtual methods (or
  function pointers in ISPC) to write a frame buffer; once the job is
  done the renderer will tell the frame buffer that it is done working
  on that frame buffer, upon which the frame buffer can take the
  appropriate action required for said frame buffer (eg, to compress
  the frame buffer, and send it to the host, to a display wall, etc)
 */
