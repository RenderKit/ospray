/*! \page cmake_scripts How OSPRay's cmake scripts work 

OSPRay supports several different build options (eg, mpi vs non mpi,
icc vs cmake, support for mic) that all require significant changes to
how exactly the project is built. For example, which compiler - and
compiler falgs - should be used if different not only for icc vs gcc,
but yet different when building with MPI (which needs to use mpi[i]cpc
and "-mt_mpi" flags etc); and everything is yet different if we also
build the MIC target (which actually is a cross-compiliation target
built _in addition to_ the xeon target.

\section cmake_basics Some basics.

- OSPRay is built via cmake.

- You should never build directly in the root source tree, but
  _always_ create a special build directory (e.g.,
  Projects/OSPRay/builddir from where to build. Use meaningful names:
  e.g., use 'build-icc' for a build that has ICC enabled; 'build-mic'
  for one that has mic enabled, build-release vs build-debug,
  etc. Typically, I also use a 'bin' build dir that builds by default
  config (in my case, icc enabled, mpi enabled, release mode)

- Since MICs require a (very!) different build than the Xeons OSPRay actually 
  supports a _dual_ target build in which it can build _both_ a xeon target _and_ a mic target (\ref cmake_dual_build)

\section cmake_dual_build MIC/Xeon Dual Build

To support MICs OSPray in particular uses a "dual" build mode in which
the same executables and libraries can be build for both a "Xeon"
target as well as for a "MIC" target.

In particlar, with MIC build enabled the *same* directory (and the
same CMakeLists.txt) may be included _twice_, once for the Xeon
target, once for the MIC target. Use the CONFIGURE_OSPRAY() and
CONFIGURE_MPI() macros (\ref cmake_macros) to set up each directorie's
rules depending on the target for which it is built; and make sure to
use the respectively set \ref cmake variables to properly build your
targets. In particular, regions of a cmake file that should *not* be
built for the MIC target (eg, because it would use libraries etc that
are not available on MIC) should always be protected by a "IF (NOT
THIS_IS_MIC)" clause.

Though OSPRay does allow to specify the ISA to be used for the Xeon
target, ti does _not_ build different targets for AVX, SSE, AVX2,
etc. Instead, there is only _one_ target built for xeons (and this can
be either SSE, AVX, or AVX2), and (optionally) a MIC target.


\section cmake_macros Important CMake Macros: CONFIGURE_OSPRAY(), CONFIGURE_MPI(), ...

In each of OSPRay's CMakeLists.txt, you sohuld _always_ - and at the
earliest possible time - call the macro "CONFIGURE_OSPRAY()", to
configure that subdirectorie's build rules. If you do need to use MPI
commands in this subdirectory, also call "CONFIGURE_MPI()", ideally
right after CONFIGURE_OSPRAY().

In particular, these macros will automatically set the following variables for each subdirectory
<dl>

<dt><code>THIS_IS_MIC</code></dt><dd>Specifies whether the current
directory is currently being used in the MIC target build. Use this to
exclude targets or cmakefile regions that you do not want to build on
MIC</dd>

<dt><code>OSPRAY_LIB_SUFFIX</code></dt><dd>Suffix to be added to each
library name. Typically this will be "" (empty string) for the Xeon
target, and "_mic" for MIC targets. This in particular allows to
resolve naming conflicts between the xeon and mic targets.</dd>

<dt><code>OSPRAY_EXE_SUFFIX</code></dt><dd>Suffix to be added to each
generated executable name. Typically this will be "" (empty string)
for the Xeon target, and ".mic" for MIC targets. This in particular
allows to resolve naming conflicts between the xeon and mic
targets. In particular, ".mic" is the suggested naming suffix to be
used with the Intel MPI runtime's automatic target detection (using
IMPI, an 'mpirun <xyz>' that includes both xeon and xeon phi nodes
will automatically launch <xyz> on the hosts, and (ifavailable),
"xyz.mic" on MICs).</dd>

<dt><code>OSPRAY_MPI</code></dt><dd>Specifies whether the users selected the MPI build option</dd>

<dt><code>OSPRAY_COMPILER</code></dt><dd>Specifies which compiler the user selected (ICC, GCC, or CLANG)</dd>

<dt><code>OSPRAY_MIC</code></dt><dd>Specifies whether the users
selected the MIC build option, and wants to build the MIC/Xeon Phi
dual build. Note that this only specifies whether the users _wants_
this target to be built; not whether the current _directory_ is
currently being built for this target (\ref cmake_dual_build)/dd>


</dl>

\section cmake_ispc ISPC Support

To properly set up the right ISPC build rules (and again, depending on
what target we build for) you should always use ADD_ISPC_LIBRARY() and
ADD_ISPC_EXECUTABLE() when adding new targets. These macros will
automatically detect which of the source files are ispc files, and add
the proper build rules depending on which target the current diectory
is built for.

*/
