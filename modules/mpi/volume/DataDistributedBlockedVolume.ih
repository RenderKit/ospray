// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "../volume/StructuredVolume.ih"

struct DDBVolumeBlock 
{
  //! range of voxels in this block
  box3i domain;
  //! 3D bounding box
  box3f bounds;
  /*! ID of _first_ node that owns this block */
  int firstOwner;
  /*! number of nodes that own this block */
  int numOwners;
  /*! 'bool' of whether this block is owned by me, or not */
  int mine;

  void   *uniform cppVolume;
  Volume *uniform ispcVolume;
};


//! \brief ISPC-side code for a data-distributed block-bricked volume class
/*! \detailed this class internally uses blocking and bricking, but
    its key distinction is that it uses a data-distributed layout.

    the class _will_ offer 'setRegion' calls, and will work in a way
    that each node decides itself which parts of the volume it will
    store, and will simply discard setregion components that do not
    belong to this particular node. Ie, the setregion call will have
    to be broadcast to _all_ nodes, with each node discarding what it
    does _not_ need.
*/
struct DDBVolume {

  //! Fields common to all StructuredVolume subtypes (must be the first entry of this struct).
  StructuredVolume super;

  // //! Volume size in blocks per dimension with padding to the nearest block.
  // uniform vec3i blockCount;

  // //! pointer to the large array of blocks.
  // void *uniform blockMem;

  // //! Voxel type.
  // uniform OSPDataType voxelType;

  // //! Voxel size in bytes.
  // uniform size_t voxelSize;

  /*! copy given block of voxels into the volume, where source[0] will
    be written to volume[targetCoord000] */
  void (*uniform setRegion)(void *uniform _volume, 
                            const void *uniform _source,
                            const uniform vec3i &regionSize, 
                            const uniform vec3i &targetCoord000);
};


