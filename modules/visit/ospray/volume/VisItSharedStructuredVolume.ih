// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "ospray/OSPDataType.h"
#include "volume/structured/StructuredVolume.ih"

//! \brief ISPC variables and functions for the VisItSharedStructuredVolume class
/*! \detailed The VisItSharedStructuredVolume is a concrete implementation
  of the StructuredVolume class in which the voxel data is laid out in
  memory in XYZ order and provided via a shared data buffer.
*/
struct VisItSharedStructuredVolume {

  //! Fields common to all StructuredVolume subtypes (must be the first entry of this struct).
  StructuredVolume super;

  //! \brief pointer to voxel data. 
  /* In this volume class, this memory region will typically be shared
     with the applicattion, so we mess with either data layout */
  const void *uniform voxelData;

  //! \brief pointer to ghost region data. 
  /* In VisIt, ghost region information forms a data array of the same
     size with the voxelData, so we need a seperate data container here*/
  const uint8 *uniform ghostData; // not used yet

  uniform int useGridAccelerator;

  //! \brief number of bytes for one x/y slice of the data. 
  /*! \detailed THis is used to compute offsets for slices with
    different z values */
  uniform uint64 bytesPerVoxel,bytesPerLine,bytesPerSlice;

  //! Voxel type.
  uniform OSPDataType voxelType;
  
  /*! @{ offsets, in bytes, for one step in x,y,z direction. ONLY
    valid if bytesPerSlice < 2G */
  varying uint32 voxelOfs_dx;
  varying uint32 voxelOfs_dy;
  varying uint32 voxelOfs_dz;
  /* @} */
    
  //! Find the next hit point in the volume for ray casting based renderers.
  void (*uniform ga_stepRay)(void *uniform _self, varying Ray &ray, const varying float samplingRate);
  void (*uniform na_stepRay)(void *uniform _self, varying Ray &ray, const varying float samplingRate);

  //! Find the next isosurface hit point in the volume for ray casting based renderers.
  void (*uniform ga_intersectIsosurface)(void *uniform _self, 
					 uniform float *uniform isovalues, 
					 uniform int numIsovalues, 
					 varying Ray &ray);
  void (*uniform na_intersectIsosurface)(void *uniform _self, 
					 uniform float *uniform isovalues, 
					 uniform int numIsovalues, 
					 varying Ray &ray);

};

void VisItSharedStructuredVolume_Constructor(VisItSharedStructuredVolume *uniform volume,
					     void *uniform cppEquivalent,
					     const uniform int voxelType,
					     const uniform vec3i &dimensions,
					     const void *uniform voxelData);
