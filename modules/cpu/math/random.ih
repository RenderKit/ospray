// Copyright 2009 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "halton.ih"
#include "rkcommon/math/vec.ih"
#include "sobol.ih"

///////////////////////////////////////////////////////////////////////////////
// Hash functions

inline uint32 MurmurHash3_mix(uint32 hash, uint32 k)
{
  const uint32 c1 = 0xcc9e2d51;
  const uint32 c2 = 0x1b873593;
  const uint32 r1 = 15;
  const uint32 r2 = 13;
  const uint32 m = 5;
  const uint32 n = 0xe6546b64;

  k *= c1;
  k = (k << r1) | (k >> (32 - r1));
  k *= c2;

  hash ^= k;
  hash = ((hash << r2) | (hash >> (32 - r2))) * m + n;

  return hash;
}

inline uint32 MurmurHash3_finalize(uint32 hash)
{
  hash ^= hash >> 16;
  hash *= 0x85ebca6b;
  hash ^= hash >> 13;
  hash *= 0xc2b2ae35;
  hash ^= hash >> 16;

  return hash;
}

inline uint32 hashToRandom(uint32 value, uint32 scramble)
{
  value = (value ^ 61) ^ scramble;
  value += value << 3;
  value ^= value >> 4;
  value *= 0x27d4eb2d;
  return value;
}

///////////////////////////////////////////////////////////////////////////////
// Utility functions

inline float CranleyPattersonRotation(float x, float dx)
{
  x += dx;
  if (x >= 1.f)
    x -= 1.f;

  return x;
}

inline vec2f CranleyPattersonRotation(vec2f v, vec2f dv)
{
  const float x = CranleyPattersonRotation(v.x, dv.x);
  const float y = CranleyPattersonRotation(v.y, dv.y);

  return make_vec2f(x, y);
}

inline float radicalInverse(uint32 idx, const uint32 base)
{
  float f = 0.f, g = 1.0f, inv = 1.0f / base;

  while (idx > 0) {
    g *= inv;
    f += (idx % base) * g;
    idx /= base;
  }

  return f;
}

////////////////////V///////////////////////////////////////////////////////////
// PCG pseudo-random number generator http://www.pcg-random.org/

struct RandomSampler
{
  uint64 state;
  uint64 stream;
};

inline uint32 RandomSampler__pcg32(varying RandomSampler *uniform self)
{
  uint64 oldstate = self->state;
  self->state = oldstate * 6364136223846793005ULL + (self->stream | 1u);
  uint32 xorshifted = ((oldstate >> 18u) ^ oldstate) >> 27u;
  uint32 rot = oldstate >> 59u;
  return (xorshifted >> rot) | (xorshifted << ((-rot) & 31));
}

inline float RandomSampler_getFloat(varying RandomSampler *uniform self)
{
  return to_float_unorm(RandomSampler__pcg32(self));
}

inline void RandomSampler_init(
    varying RandomSampler *uniform self, uint64 seed, uint64 stream)
{
  self->state = 0;
  self->stream = (stream << 1u) | 1u;

  // hash seed to reduce correlation artefacts
  self->state = MurmurHash3_mix(self->state, seed);
  self->state = MurmurHash3_finalize(self->state);

  RandomSampler__pcg32(self);
  self->state += seed;
  RandomSampler__pcg32(self);
}

inline void RandomSampler_init(varying RandomSampler *uniform self, uint64 seed)
{
  RandomSampler_init(self, seed, 0);
}

///////////////////////////////////////////////////////////////////////////////
// TEA - Random numbers based on Tiny Encryption Algorithm

inline void tea8(uint32 &_v0, uint32 &_v1)
{
  uint32 v0  = _v0; // operate on registers to avoid slowdown
  uint32 v1  = _v1;
  uint32 sum = 0;

  for (uniform int i = 0; i < 8; i++) { // just 8 instead of 32 rounds
    sum += 0x9e3779b9;
    v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + sum) ^ ((v1 >> 5) + 0xc8013ea4);
    v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + sum) ^ ((v0 >> 5) + 0x7e95761e);
  }
  _v0  = v0;
  _v1  = v1;
}

struct RandomTEA
{
  vec2ui state;
};

inline void RandomTEA__Constructor(
    varying RandomTEA *uniform self, const uint32 idx, const uint32 seed)
{
  self->state.x = idx;
  self->state.y = seed;
}

inline varying vec2f RandomTEA__getFloats(varying RandomTEA *uniform self)
{
  tea8(self->state.x, self->state.y);
  return to_float_unorm(self->state);
}

///////////////////////////////////////////////////////////////////////////////
// LCG - Linear Congruential Generator

inline uint32 LCG_init(uint32 pixelID, uint32 sampleIndex)
{
  uint32 state = 0;
  state = MurmurHash3_mix(state, pixelID);
  state = MurmurHash3_mix(state, sampleIndex);
  state = MurmurHash3_finalize(state);
  return state;
}

inline uint32 LCG_next(uint32 value)
{
  const uint32 m = 1664525;
  const uint32 n = 1013904223;

  return value * m + n;
}

inline float LCG_getFloat(uint32 &state)
{
  state = LCG_next(state);
  return to_float_unorm(state);
}

inline vec2f LCG_getFloat2(uint32 &state)
{
  const float x = LCG_getFloat(state);
  const float y = LCG_getFloat(state);
  return make_vec2f(x, y);
}

inline vec3f LCG_getFloat3(uint32 &state)
{
  const float x = LCG_getFloat(state);
  const float y = LCG_getFloat(state);
  const float z = LCG_getFloat(state);
  return make_vec3f(x, y, z);
}

////////////////////////////////////////////////////////////////////////////////
// Low-discrepancy (Sobol) sampler

struct LDSampler
{
  uint32 index; // sample index
  uint32 scramble; // random number for scrambling the samples
  uint32 lcg; // LCG used when we run out of dimensions
};

inline void LDSampler_init(
    varying LDSampler *uniform self, uint32 pixelID, uint32 sampleIndex)
{
  // skip the first few samples to reduce correlation artifacts
  self->index = sampleIndex + 64;

  uint32 hash = 0;
  hash = MurmurHash3_mix(hash, pixelID);
  self->scramble = MurmurHash3_finalize(hash);

  hash = MurmurHash3_mix(hash, sampleIndex);
  self->lcg = MurmurHash3_finalize(hash);
}

inline float LDSampler_getFloat(
    varying LDSampler *uniform self, uniform uint32 dimension)
{
  if (dimension >= Sobol_numDimensions)
    return LCG_getFloat(self->lcg);

  // Sample the Sobol sequence
  const float s = Sobol_sample(self->index, dimension);

  // Apply Cranley-Patterson rotation to reduce correlation artifacts
  const float shift = to_float_unorm(hashToRandom(dimension, self->scramble));
  return CranleyPattersonRotation(s, shift);
}

inline vec2f LDSampler_getFloat2(
    varying LDSampler *uniform self, uniform uint32 dimension)
{
  const float x = LDSampler_getFloat(self, dimension);
  const float y = LDSampler_getFloat(self, dimension + 1);
  return make_vec2f(x, y);
}

///////////////////////////////////////////////////////////////////////////////
// Hammersley - low discrepancy random numbers; only two dimensions; no state

inline varying vec2f RandomHammersley2__getFloats(varying uint32 idx)
{
  return make_vec2f(rcp((float)idx), Halton_sample2(idx));
}

///////////////////////////////////////////////////////////////////////////////
// halton - low discrepancy halton sequence; first two dimensions; no state

inline varying vec2f HaltonSequence_get2D(varying uint32 idx)
{
  return make_vec2f(Halton_sample2(idx), Halton_sample3(idx));
}
