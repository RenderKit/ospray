// Copyright 2009 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "common/DifferentialGeometry.ih"
#include "render/bsdfs/BSDF.ih"
#include "render/materials/Medium.ih"
#include "volume/VolumetricModel.ih"
// c++ shared
#include "PathTracerShared.h"

struct World;
struct LDSampler;
struct RandomSampler;

enum PathVertexType
{
  SURFACE,
  VOLUME,
  CAMERA,
  LIGHT,
  ENVIRONMENT
};

struct PathVertex
{
  DifferentialGeometry dg;
  vec3f wi;
  vec3f wo;

  vec3f albedo;

  const varying BSDF *bsdf; // only valid if path vertex is surface vertex
  VolumetricModel *volume; // only valid if path vertex is volume vertex

  float pdf_w; // the pdf of sampling wo in solid angle measure
  PathVertexType type;
};

struct PathContext
{
  const PathTracer *uniform context;
  const World *uniform world;
  const varying vec2f *uniform pixel;
  varying LDSampler *uniform ldSampler;
  varying RandomSampler *uniform randomSampler;
  uniform int numLights;
  uniform int numLightSamples;
  uniform float *uniform lightsCDF;
  uniform uint32 numBounceSampleDims; // BSDF sample (3D), roulette (1D), light
                                      // samples (numLightSamples*(1D+2D))
};

struct PathState
{
  bool debug;
  bool disableNEE; // turn off NEE contribution for debugging purposes
  bool disableFWD; // turn off FWD contribution for debugging purposes
  bool straightPath; // path from camera did not change direction, for alpha and
                     // backplate
  bool specularTransmissionPath; // path from camera only has specular
                                 // transmissions, for alpha and backplate
  bool auxFree; // normal & albedo buffer were not yet written to
  uniform uint32 depth;
  uniform uint32 sampleDim; // skip: pixel (2D), lens (2D), time (1D)
  vec3f throughput;
  vec3f contribution;
  float time;
  Medium currentMedium;
  float shadowCatcherDist;
};
