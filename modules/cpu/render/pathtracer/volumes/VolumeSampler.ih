// Copyright 2009 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "render/pathtracer/PathStructs.ih"
#include "render/pathtracer/volumes/HenyeyGreenstein.ih"
#include "rkcommon/math/vec.ih"

struct World;
struct LDSampler;
struct RandomSampler;
struct Ray;
struct RayIntervals;

float volumeSampleFreePath(const PathState &pathState,
    const World *uniform world,
    Ray &ray,
    RayIntervals &rayIntervals,
    varying LDSampler *uniform ldSampler,
    varying RandomSampler *uniform randomSampler,
    VolumetricModel *varying *uniform sampledInstance,
    float &sampledExtinctionCoefficient,
    vec3f &sampledAlbedo);

float volumeTransmittance(const PathState &pathState,
    const World *uniform world,
    Ray &ray,
    RayIntervals &rayIntervals,
    varying LDSampler *uniform ldSampler,
    varying RandomSampler *uniform randomSampler);

inline bool isSmoothVolumeVertex(const PathVertex &pathVertex)
{
  return HenyeyGreenstein_isSmooth(pathVertex.volume->anisotropy);
}
