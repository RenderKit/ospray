// Copyright 2009 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "BSDF.ih"
#include "ShadingContext.ih"

inline BSDF_EvalRes Lambert_eval(
    const varying BSDF *uniform self, const vec3f &wo, const vec3f &wi)
{
  BSDF_EvalRes res;
  float cosThetaI = max(dot(wi, getN(self)), 0.f);
  res.pdf = cosineSampleHemispherePDF(cosThetaI);
  res.value = self->albedo * one_over_pi * cosThetaI;
  return res;
}

inline BSDF_SampleRes Lambert_sample(
    const varying BSDF *uniform self, const vec3f &wo, const vec2f &s, float ss)
{
  const vec3f localDir = cosineSampleHemisphere(s);
  BSDF_SampleRes res;
  res.wi = getFrame(self) * localDir;
  res.pdf = cosineSampleHemispherePDF(localDir);
  res.type = BSDF_DIFFUSE_REFLECTION;
  res.weight = self->albedo;
  return res;
}

inline varying BSDF *uniform Lambert_create(uniform ShadingContext *uniform ctx,
    const varying linear3f *uniform frame,
    const varying vec3f &R)
{
  varying BSDF *uniform self =
      (varying BSDF * uniform) ShadingContext_alloc(ctx, sizeof(BSDF));
  BSDF_Constructor(
      self, R, BSDF_DIFFUSE_REFLECTION, Lambert_eval, Lambert_sample, frame);
  return self;
}
