// Copyright 2009 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "common/World.ih"
#include "rkcommon/math/vec.ih"

float computeAO(const World *uniform,
    const varying DifferentialGeometry &,
    const uniform int sampleCnt,
    const uniform float aoRadius,
    const varying vec3i &sampleID);

// struct that stores a precomputed z-order for tiles of TILE_SIZE x TILE_SIZE
// pixels
struct z_order_t
{
  // 32-bit field specifying both x and y coordinate of the z-order,
  // with upper 16 bits for the y coordinate, and lower 16 for the x
  // coordinate. Compared to using two uint32-arrays, this saves on
  // gather-loop
  uniform uint32 xyIdx[TILE_SIZE * TILE_SIZE];
  uniform uint32 xs[TILE_SIZE * TILE_SIZE];
  uniform uint32 ys[TILE_SIZE * TILE_SIZE];
};

inline uint32 getZOrderX(const uint32 &xs16_ys16)
{
  return xs16_ys16 & (0xffff);
}
inline uint32 getZOrderY(const uint32 &xs16_ys16)
{
  return xs16_ys16 >> 16;
}

extern uniform z_order_t z_order;
extern uniform bool z_order_initialized;

// TODO should use PDEP
inline uniform uint32 partitionZOrder(uniform uint32 n)
{
  n &= 0x0000FFFF;
  n = (n | (n << 8)) & 0x00FF00FF;
  n = (n | (n << 4)) & 0x0F0F0F0F;
  n = (n | (n << 2)) & 0x33333333;
  n = (n | (n << 1)) & 0x55555555;
  return n;
}

// TODO should use PEXT
inline uniform uint32 unpartitionZOrder(uniform uint32 n)
{
  n &= 0x55555555;
  n = (n ^ (n >> 1)) & 0x33333333;
  n = (n ^ (n >> 2)) & 0x0F0F0F0F;
  n = (n ^ (n >> 4)) & 0x00FF00FF;
  n = (n ^ (n >> 8)) & 0x0000FFFF;
  return n;
}

inline uniform uint32 interleaveZOrder(uniform uint32 x, uniform uint32 y)
{
  return partitionZOrder(x) | (partitionZOrder(y) << 1);
}

inline void deinterleaveZOrder(
    uniform uint32 z, uniform uint32 *uniform x, uniform uint32 *uniform y)
{
  assert(x);
  assert(y);
  *x = *y = 0;
  *x = unpartitionZOrder(z);
  *y = unpartitionZOrder(z >> 1);
}

extern const z_order_t *uniform get_zorder();
