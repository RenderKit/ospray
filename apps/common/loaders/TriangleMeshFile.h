// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include <stdlib.h>
#include <string>
#include <iostream>
#include "ospray/ospray.h"

//! \brief Define a function to create an instance of the InternalClass
//!  associated with ExternalName.
//!
//! \internal The function generated by this macro is used to create an
//!  instance of a concrete subtype of an abstract base class.  This
//!  macro is needed since the subclass type may not be known to OSPRay
//!  at build time.  Rather, the subclass can be defined in an external
//!  module and registered with OSPRay using this macro.
//! 
#define OSP_REGISTER_TRIANGLEMESH_FILE(InternalClass, ExternalName)           \
  extern "C" OSPGeometry ospray_import_trianglemesh_file_##ExternalName(const std::string &filename, OSPGeometry triangleMesh) \
    { InternalClass file(filename);  return(file.importTriangleMesh(triangleMesh)); }

//! \brief The TriangleMeshFile class is an abstraction for the concrete
//!  object which is used to load triangle mesh data from a file.
//!
//!  The format of the triangle data stored in a file on disk is unknown
//!  to this class.  Subclasses implement loaders for specific formats,
//!  and the actual subclass used is determined from the file extension.
//!  This subclass must be registered in OSPRay proper, or in a loaded
//!  module via OSP_REGISTER_TRIANGLEMESH_FILE.
//!
class TriangleMeshFile {
public:

  //! Destructor.
  virtual ~TriangleMeshFile() {}

  //! Create a TriangleMeshFile object of the subtype given by the file
  //! extension and import the triangle mesh.
  static OSPGeometry importTriangleMesh(const std::string &filename,
                                        OSPGeometry triangleMesh);

  //! Import the triangle mesh specification and data.
  virtual OSPGeometry importTriangleMesh(OSPGeometry triangleMesh) = 0;

  //! A string description of this class.
  virtual std::string toString() const;

protected:

  //! Print an error message.
  void emitMessage(const std::string &kind, const std::string &message) const;

  //! Error checking.
  void exitOnCondition(bool condition, const std::string &message) const;

  //! Warning condition.
  void warnOnCondition(bool condition, const std::string &message) const;

  //! Get the absolute file path.
  static std::string getFullFilePath(const std::string &filename);
};
