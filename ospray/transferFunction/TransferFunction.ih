// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "../common/OSPCommon.ih"
#include "../math/vec.ih"

//! Abstract base class for any kind of transfer function.
struct TransferFunction {

  //! The value range covered by the transfer function.
  vec2f valueRange;
  uniform bool preIntegration;
  uniform bool preIntegrationComputed;

  //! Interpolated color for the given value.
  varying vec3f (*getColorForValue)(const void *uniform transferFunction, 
                                    varying float value);


  //! Interpolated color for the given value.
  varying vec3f (*getIntegratedColorForValue)(const void *uniform transferFunction, 
                                    varying float value1, varying float value2);

  //! Interpolated opacity for the given value.
  varying float (*getOpacityForValue)(const void *uniform transferFunction, 
                                      varying float value);

  //! Interpolated opacity for the given value.
  varying float (*getIntegratedOpacityForValue)(const void *uniform transferFunction, 
                                      varying float value1, varying float value2);
      
  //! Virtual function to look up the maximum opacity value based on an input range.
  varying float (*getMaxOpacityInRange)(void *uniform transferFunction, 
                                        const varying vec2f &range);

  //! Virtual function to look up the min/max opacity value based on an input range.
  uniform vec2f (*getMinMaxOpacityInRange)(void *uniform transferFunction, 
                                           const uniform vec2f &range);

};
