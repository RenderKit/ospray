// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "../math/vec.ih"

/*! \file ospray/render/util.ih \brief Utility-functions for shaders */

/*! number of precomputed halton values, must be a power of 2 */
#define NUM_PRECOMPUTED_HALTON_VALUES 256

/*! precomputed base-2, base-3, and base-5 halton sequence values, for
    NUM_PRECOMPUTED_HALTON_VALUES values */
extern uniform float precomputedHalton[3][NUM_PRECOMPUTED_HALTON_VALUES];
extern uniform bool precomputedHalton_initialized;
extern void precomputedHalton_create();

inline float precomputedHalton2(uint32 sampleID) 
{ 
  if (!precomputedHalton_initialized) precomputedHalton_create(); 
  return precomputedHalton[0][sampleID & (NUM_PRECOMPUTED_HALTON_VALUES-1)]; 
}

inline float precomputedHalton3(uint32 sampleID) 
{ 
  if (!precomputedHalton_initialized) precomputedHalton_create(); 
  return precomputedHalton[1][sampleID & (NUM_PRECOMPUTED_HALTON_VALUES-1)]; 
}

inline float precomputedHalton5(uint32 sampleID) 
{ 
  if (!precomputedHalton_initialized) precomputedHalton_create(); 
  return precomputedHalton[2][sampleID & (NUM_PRECOMPUTED_HALTON_VALUES-1)]; 
}


inline uniform float precomputedHalton2(uniform uint32 sampleID) 
{ 
  if (!precomputedHalton_initialized) precomputedHalton_create(); 
  return precomputedHalton[0][sampleID & (NUM_PRECOMPUTED_HALTON_VALUES-1)]; 
}

inline uniform float precomputedHalton3(uniform uint32 sampleID) 
{ 
  if (!precomputedHalton_initialized) precomputedHalton_create(); 
  return precomputedHalton[1][sampleID & (NUM_PRECOMPUTED_HALTON_VALUES-1)]; 
}

inline uniform float precomputedHalton5(uniform uint32 sampleID) 
{ 
  if (!precomputedHalton_initialized) precomputedHalton_create(); 
  return precomputedHalton[2][sampleID & (NUM_PRECOMPUTED_HALTON_VALUES-1)]; 
}



inline vec3f make_random_color(const int i)
{
  const int mx = 13*17*43;
  const int my = 11*29;
  const int mz = 7*23*63;
  const uint32 g = (i * (3*5*127)+12312314);
  return make_vec3f((g % mx)*(1.f/(mx-1)),
                    (g % my)*(1.f/(my-1)),
                    (g % mz)*(1.f/(mz-1)));
}

/*! struct that stores a precomputed z-order for tiles of TILE_SIZE x TILE_SIZE pixels */
struct z_order_t {
  /*! 32-bit field specifying both x and y coordinate of the z-order,
      with upper 16 bits for the y coordinate, and lower 16 for the x
      coordinate. Compared to using two uint32-arrays, this saves on
      gather-loop */
  uniform uint32 xyIdx[TILE_SIZE*TILE_SIZE];
  uniform uint32 xs[TILE_SIZE*TILE_SIZE];
  uniform uint32 ys[TILE_SIZE*TILE_SIZE];
};

inline uint32 getZOrderX(const uint32 &xs16_ys16) { return xs16_ys16 & (0xffff); }
inline uint32 getZOrderY(const uint32 &xs16_ys16) { return xs16_ys16 >> 16; }

extern uniform z_order_t z_order;
extern uniform bool z_order_initialized;

// TODO should use PDEP
inline uniform uint32 partitionZOrder(uniform uint32 n) {
  n &= 0x0000FFFF;
  n = (n | (n << 8)) & 0x00FF00FF;
  n = (n | (n << 4)) & 0x0F0F0F0F;
  n = (n | (n << 2)) & 0x33333333;
  n = (n | (n << 1)) & 0x55555555;
  return n;
}

// TODO should use PEXT
inline uniform uint32 unpartitionZOrder(uniform uint32 n) {
  n &= 0x55555555;
  n = (n ^ (n >> 1)) & 0x33333333;
  n = (n ^ (n >> 2)) & 0x0F0F0F0F;
  n = (n ^ (n >> 4)) & 0x00FF00FF;
  n = (n ^ (n >> 8)) & 0x0000FFFF;
  return n;
}

inline uniform uint32 interleaveZOrder(uniform uint32 x, uniform uint32 y) {
  return partitionZOrder(x) | (partitionZOrder(y) << 1);
}

inline void deinterleaveZOrder(uniform uint32 z, uniform uint32 *uniform x, uniform uint32 *uniform y) {
  assert(x); assert(y);
  *x = *y = 0;
  *x = unpartitionZOrder(z);
  *y = unpartitionZOrder(z >> 1);
}

/*! precompute a per-pixel z-order to be used within a tile */
extern void precomputedZOrder_create();

/*! precompute a per-pixel z-order to be used within a tile */
inline void precomputeZOrder()
{ if (!z_order_initialized) precomputedZOrder_create(); }

