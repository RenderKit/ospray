// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "common/Model.ih"
#include "render/Renderer.ih"
#include "lights/Light.ih"

#define ALPHA_THRESHOLD (.05f)

struct SciVisRenderer
{
  Renderer super;
  float volumeEpsilon;

  const uniform Light *uniform *uniform lights;
  uint32 numLights;
  bool  oneSidedLighting;

  bool  shadowsEnabled;

  int   aoSamples;
  float aoDistance;
  vec3f aoColor;
  bool  aoTransparencyEnabled;

  // ------------------------------------------------------------------
  // pre-computed state variables so we don't have to check certain
  // stuff per pixel
  // ------------------------------------------------------------------

  /*! checks if all the values (aoSamples, aoDistance, aoColor) etc
      require use of AO, and if not, skip AO computatoins */
  bool needToDoAO;
};

float lightAlpha(const uniform SciVisRenderer *uniform self,
                 Ray &ray, uniform Model *uniform model,
                 const float weight,
                 const varying float &rayOffset,
                 const varying vec3i &sampleID,
                 const uniform float quality);

Volume *
SciVisRenderer_intersectVolumes(const uniform SciVisRenderer *uniform renderer,
                                varying Ray &ray,
                                const varying float &rayOffset);

vec4f SciVisRenderer_computeVolumeInterval(const SciVisRenderer *uniform renderer,
                                           Volume *uniform volume,
                                           varying Ray &ray, float tBegin,
                                           float tEnd, float maxOpacity, bool isShadowRay, const varying float &rayOffset, const varying vec3i &sampleID, uniform float quality);

