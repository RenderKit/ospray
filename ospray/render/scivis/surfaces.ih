// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "SciVis.ih"
#include "SciVisMaterial.ih"

struct SurfaceShadingInfo
{
  vec4f shadedColor;
  vec3f albedo;
};

typedef SurfaceShadingInfo SSI;

SSI computeShading(const SciVis *uniform self,
    const FrameBuffer *uniform fb,
    const World *uniform world,
    const DifferentialGeometry &dg,
    ScreenSample &sample,
    varying LDSampler *uniform ldSampler,
    const varying vec3f &inDir,
    const float time);

struct SciVisBSDF
{
  vec3f diffuse;
  vec3f specular;
  float shininess;
  float opacity;
  vec3f albedo;
};

inline SciVisBSDF evalMaterial(const DifferentialGeometry &dg)
{
  const SciVisMaterial *mat = (const SciVisMaterial *)dg.material;

  // defaults
  SciVisBSDF res;
  res.diffuse = make_vec3f(dg.color);
  res.specular = make_vec3f(0.0f);
  res.shininess = 10.0f;
  res.opacity = dg.color.w;

  foreach_unique (m in mat) {
    if (m != NULL && m->super.type == RENDERER_TYPE_SCIVIS) {
      res.opacity *= m->d * get1f(m->dMap, dg, 1.f);

      res.diffuse = res.diffuse * m->Kd;
      if (valid(m->KdMap)) {
        vec4f Kd_from_map = get4f(m->KdMap, dg);
        res.diffuse = res.diffuse * make_vec3f(Kd_from_map);
        res.opacity *= Kd_from_map.w;
      }
      res.diffuse = res.diffuse * res.opacity;
      res.specular = res.opacity * m->Ks * get3f(m->KsMap, dg, make_vec3f(1.f));
      res.shininess = m->Ns * get1f(m->NsMap, dg, 1.0f);
    }
  }

  res.albedo = res.diffuse + res.specular; // before normalization!

  // convert from Phong exponent to Blinn
  res.shininess *= 4.0f;
  // BRDF normalization
  res.diffuse = res.diffuse * one_over_pi;
  res.specular = res.specular
      * ((res.shininess + 2.f) * one_over_four_pi
          * rcp(2.f - exp(res.shininess * -lntwo_over_two)));

  return res;
}
