// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "BSDF.ih"
#include "Fresnel.ih"
#include "GGXDistribution.ih"

// Simplified Weidlich-Wilkie microfacet coating BSDF with the Smith microsurface model.
// Refraction for all rays and Fresnel for exiting rays are ignored, but absorption is computed
// from the refracted ray lengths. The advantages are that it does not suffer from energy loss,
// absorption behaves the same as in the original approach, and it's faster.
// [Weidlich and Wilkie, 2007, "Arbitrarily Layered Micro-Facet Surfaces"]
// [Walter et al., 2007, "Microfacet Models for Refraction through Rough Surfaces"]
struct MicrofacetDielectricLayer
{
  BSDF super;

  varying BSDF* uniform substrate;
  float eta;
  vec3f transmittance;
  float thickness;
  GGXDistribution distribution;
};

inline BSDF_EvalRes MicrofacetDielectricLayer_eval(const varying BSDF* uniform super,
                                                   const vec3f& wo, const vec3f& wi)
{
  const varying MicrofacetDielectricLayer* uniform self = (const varying MicrofacetDielectricLayer* uniform)super;
  BSDF_EvalRes res;

  float cosThetaO = dot(wo, getN(super));
  float cosThetaI = dot(wi, getN(super));
  if (cosThetaO <= 0.f || cosThetaI <= 0.f)
    return make_BSDF_EvalRes_zero();

  // Compute the microfacet normal
  vec3f wh = normalize(wi + wo);
  float cosThetaOH = dot(wo, wh);

  // Fresnel term
  float F = fresnelDielectric(cosThetaOH, self->eta);

  // Evaluate the coating reflection
  float cosThetaH = dot(wh, getN(super));
  float cosThetaIH = dot(wi, wh);

  float whPdf;
  //float D = eval(self->distribution, cosThetaH, whPdf);
  float D = evalVisible(self->distribution, cosThetaH, cosThetaO, cosThetaOH, whPdf);
  float G = G2(self->distribution, cosThetaO, cosThetaI, cosThetaOH, cosThetaIH);

  BSDF_EvalRes coating;
  coating.pdf = whPdf * rcp(4.f*cosThetaOH);
  coating.value = make_vec3f(F * D * G * rcp(4.f*cosThetaO));

  // Evaluate the substrate
  // Ignore refraction
  BSDF_EvalRes substrate = self->substrate->eval(self->substrate, wo, wi);

  // Apply the coating transmittance
  // Computing the path length from the original angles would result in too much absorption, so instead use the refracted angles
  float cosThetaO1 = refract(cosThetaO, self->eta); // positive
  float cosThetaI1 = refract(cosThetaI, self->eta); // positive
  substrate.value = substrate.value * pow(self->transmittance, self->thickness * (rcp(cosThetaO1) + rcp(cosThetaI1)));

  // Compute the final substrate reflection
  // Ignore Fresnel for the exiting ray
  substrate.value = substrate.value * (1.f-F);

  // Compute the total reflection
  float coatingPickProb = fresnelDielectric(cosThetaO, self->eta); // have to use the macronormal for sampling
  float substratePickProb = 1.f - coatingPickProb;

  res.pdf = coatingPickProb * coating.pdf + substratePickProb * substrate.pdf;
  res.value = coating.value + substrate.value;
  return res;
}

inline BSDF_SampleRes MicrofacetDielectricLayer_sample(const varying BSDF* uniform super,
                                                       const vec3f& wo, const vec2f& s, float ss)
{
  const varying MicrofacetDielectricLayer* uniform self = (const varying MicrofacetDielectricLayer* uniform)super;
  BSDF_SampleRes res;

  float cosThetaO = dot(wo, getN(super));
  if (cosThetaO <= 0.f)
    return make_BSDF_SampleRes_zero();

  // Sample the coating or the substrate reflection
  vec3f wh;
  BSDF_EvalRes substrate;

  float coatingPickProb = fresnelDielectric(cosThetaO, self->eta); // only the macronormal is available yet
  float substratePickProb = 1.f - coatingPickProb;

  if (ss < coatingPickProb)
  {
      // Sample the microfacet normal
      float whPdf;
      //wh = getFrame(super) * sample(self->distribution, whPdf, s);
      wh = getFrame(super) * sampleVisible(self->distribution, transposed(getFrame(super)) * wo, whPdf, s);
      float cosThetaOH = dot(wo, wh);

      res.type = BSDF_GLOSSY_REFLECTION;
      res.wi = reflect(wo, wh, cosThetaOH);

      // Evaluate the substrate
      substrate = self->substrate->eval(self->substrate, wo, res.wi);
  }
  else
  {
      // Sample the substrate
      float ss1 = (ss - coatingPickProb) * rcp(substratePickProb); // reallocate sample
      res = self->substrate->sample(self->substrate, wo, s, ss1);
      if (reduce_max(res.weight) <= 0.f)
        return res;
      substrate.pdf = res.pdf;
      substrate.value = res.weight * res.pdf;

      // Compute the microfacet normal
      wh = normalize(res.wi + wo);
  }

  float cosThetaI = dot(res.wi, getN(super));
  if (cosThetaI <= 0.f)
    return make_BSDF_SampleRes_zero();
  float cosThetaOH = dot(wo, wh);

  // Fresnel term
  float F = fresnelDielectric(cosThetaOH, self->eta);

  // Evaluate the coating reflection
  float cosThetaH = dot(wh, getN(super));
  float cosThetaIH = dot(res.wi, wh);

  float whPdf;
  //float D = eval(self->distribution, cosThetaH, whPdf);
  float D = evalVisible(self->distribution, cosThetaH, cosThetaO, cosThetaOH, whPdf);
  float G = G2(self->distribution, cosThetaO, cosThetaI, cosThetaOH, cosThetaIH);

  BSDF_EvalRes coating;
  coating.pdf = whPdf * rcp(4.f*cosThetaOH);
  coating.value = make_vec3f(F * D * G * rcp(4.f*cosThetaO));

  // Apply the coating transmittance
  float cosThetaO1 = refract(cosThetaO, self->eta); // positive
  float cosThetaI1 = refract(cosThetaI, self->eta); // positive
  substrate.value = substrate.value * pow(self->transmittance, self->thickness * (rcp(cosThetaO1) + rcp(cosThetaI1)));

  // Compute the final substrate reflection
  substrate.value = substrate.value * (1.f-F);

  // Compute the total reflection
  res.pdf = coatingPickProb * coating.pdf + substratePickProb * substrate.pdf;
  res.weight = (coating.value + substrate.value) * rcp(res.pdf);
  return res;
}

inline void MicrofacetDielectricLayer_Constructor(varying MicrofacetDielectricLayer* uniform self, const varying linear3f* uniform frame,
                                                  varying BSDF* uniform substrate, float eta, vec3f transmittance, float thickness, float roughness)
{
  BSDF_Constructor(&self->super, BSDF_GLOSSY_REFLECTION | substrate->type,
                   MicrofacetDielectricLayer_eval, MicrofacetDielectricLayer_sample,
                   frame);

  self->substrate = substrate;
  self->eta = eta;
  self->transmittance = transmittance;
  self->thickness = thickness;
  self->distribution = make_GGXDistribution(roughnessToAlpha(roughness));
}

inline varying BSDF* uniform MicrofacetDielectricLayer_create(uniform ShadingContext* uniform ctx, const varying linear3f* uniform frame,
                                                              varying BSDF* uniform substrate, float eta, vec3f transmittance, float thickness, float roughness)
{
  varying MicrofacetDielectricLayer* uniform self = (varying MicrofacetDielectricLayer* uniform)ShadingContext_alloc(ctx, sizeof(MicrofacetDielectricLayer));
  MicrofacetDielectricLayer_Constructor(self, frame, substrate, eta, transmittance, thickness, roughness);
  return &self->super;
}
