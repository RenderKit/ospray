// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "math/vec.ih"
// utilites used by (almost all) implementations
#include "math/sampling.ih"
#include "Optics.ih"

#define BSDF_SPECULAR_REFLECTION   (1<<0)  /*!< diffuse light reflection            */
#define BSDF_DIFFUSE_REFLECTION    (1<<1)  /*!< glossy light reflection             */
#define BSDF_GLOSSY_REFLECTION     (1<<2)  /*!< perfect specular light reflection   */
#define BSDF_DIFFUSE_TRANSMISSION  (1<<3)  /*!< diffuse light transmission          */
#define BSDF_GLOSSY_TRANSMISSION   (1<<4)  /*!< glossy light transmission           */
#define BSDF_SPECULAR_TRANSMISSION (1<<5)  /*!< perfect specular light transmission */

/*! diffuse reflections and transmissions          */
#define BSDF_DIFFUSE      (BSDF_DIFFUSE_REFLECTION   | BSDF_DIFFUSE_TRANSMISSION)

/*! glossy reflections and transmissions           */
#define BSDF_GLOSSY       (BSDF_GLOSSY_REFLECTION    | BSDF_GLOSSY_TRANSMISSION)

/*! perfect specular reflections and transmissions */
#define BSDF_SPECULAR     (BSDF_SPECULAR_REFLECTION  | BSDF_SPECULAR_TRANSMISSION)

/*! all possible reflections   */
#define BSDF_REFLECTION   (BSDF_DIFFUSE_REFLECTION   | BSDF_GLOSSY_REFLECTION   | BSDF_SPECULAR_REFLECTION)

/*! all possible transmissions */
#define BSDF_TRANSMISSION (BSDF_DIFFUSE_TRANSMISSION | BSDF_GLOSSY_TRANSMISSION | BSDF_SPECULAR_TRANSMISSION)

/*! all non-dirac types */
#define BSDF_SMOOTH       (BSDF_DIFFUSE | BSDF_GLOSSY)

/*! no component set   */
#define BSDF_NONE         0

/*! all components set */
#define BSDF_ALL          (BSDF_REFLECTION | BSDF_TRANSMISSION)

struct BSDF;

typedef uint32 BSDF_Type;

struct BSDF_EvalRes
{
  vec3f value; //!< radiance multiplied by dot(wi,N)
  float pdf;
};

inline BSDF_EvalRes make_BSDF_EvalRes_zero()
{
  BSDF_EvalRes res;
  res.value = make_vec3f(0.0f);
  res.pdf = 0.0f;
  return res;
}

typedef BSDF_EvalRes (*BSDF_EvalFunc)(const varying BSDF* uniform self,
                                      const vec3f& wo, const vec3f& wi);

// Note: the pdf of Dirac delta distributions is represented with inf. This is
// possible, because in weight we already cancel the Dirac delta (but still
// account for a changed pdf by e.g. discrete events such as component
// selection).
struct BSDF_SampleRes
{
  vec3f weight; //!< radiance multiplied by dot(wi,N)/pdf
  vec3f wi;
  float pdf;
  BSDF_Type type;
};

inline BSDF_SampleRes make_BSDF_SampleRes_zero()
{
  BSDF_SampleRes res;
  res.weight = make_vec3f(0.0f);
  return res;
}

typedef BSDF_SampleRes (*BSDF_SampleFunc)(const varying BSDF* uniform self,
                                          const vec3f& wo, const vec2f& s, float ss);

struct BSDF
{
  varying BSDF_Type type;
  uniform BSDF_EvalFunc eval;
  uniform BSDF_SampleFunc sample;
  const varying linear3f* uniform frame;
};

inline void BSDF_Constructor(varying BSDF* uniform self,
                             varying BSDF_Type type,
                             uniform BSDF_EvalFunc eval,
                             uniform BSDF_SampleFunc sample,
                             const varying linear3f* uniform frame)
{
  self->type = type;
  self->eval = eval;
  self->sample = sample;
  self->frame = frame;
}

inline vec3f getN(const varying BSDF* uniform bsdf)
{
  return bsdf->frame->vz;
}

inline linear3f getFrame(const varying BSDF* uniform bsdf)
{
  return *bsdf->frame;
}
