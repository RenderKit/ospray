// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "render/pathtracer/Scattering.ih"

#include "math/vec.ih"
// utilities used by (almost all) implementations
#include "math/sampling.ih"
#include "math/random.ih"
#include "Optics.ih"

// keep interface of BSDFs the same
typedef Scattering_EvalRes BSDF_EvalRes;
typedef Scattering_SampleRes BSDF_SampleRes;
typedef Scattering_Type BSDF_Type;

#define BSDF_SPECULAR_REFLECTION   SCATTERING_SPECULAR_REFLECTION
#define BSDF_GLOSSY_REFLECTION     SCATTERING_GLOSSY_REFLECTION
#define BSDF_DIFFUSE_REFLECTION    SCATTERING_DIFFUSE_REFLECTION
#define BSDF_SPECULAR_TRANSMISSION SCATTERING_SPECULAR_TRANSMISSION
#define BSDF_GLOSSY_TRANSMISSION   SCATTERING_GLOSSY_TRANSMISSION
#define BSDF_DIFFUSE_TRANSMISSION  SCATTERING_DIFFUSE_TRANSMISSION
#define BSDF_DIFFUSE               SCATTERING_DIFFUSE      
#define BSDF_GLOSSY                SCATTERING_GLOSSY       
#define BSDF_SPECULAR              SCATTERING_SPECULAR     
#define BSDF_REFLECTION            SCATTERING_REFLECTION   
#define BSDF_TRANSMISSION          SCATTERING_TRANSMISSION 
#define BSDF_SMOOTH                SCATTERING_SMOOTH       
#define BSDF_NONE                  SCATTERING_NONE         
#define BSDF_ALL                   SCATTERING_ALL          


struct BSDF;

inline BSDF_EvalRes make_BSDF_EvalRes_zero()
{
  BSDF_EvalRes res;
  res.value = make_vec3f(0.0f);
  res.pdf = 0.0f;
  return res;
}

inline BSDF_SampleRes make_BSDF_SampleRes_zero()
{
  BSDF_SampleRes res;
  res.weight = make_vec3f(0.0f);
  return res;
}

typedef BSDF_EvalRes (*BSDF_EvalFunc)(const varying BSDF* uniform self,
                                      const vec3f& wo, const vec3f& wi);

typedef BSDF_SampleRes (*BSDF_SampleFunc)(const varying BSDF* uniform self,
                                          const vec3f& wo, const vec2f& s, float ss);

struct BSDF
{
  varying vec3f albedo;
  varying BSDF_Type type;
  uniform BSDF_EvalFunc eval;
  uniform BSDF_SampleFunc sample;
  const varying linear3f* uniform frame;
};

inline void BSDF_Constructor(varying BSDF* uniform self,
                             varying vec3f albedo,
                             varying BSDF_Type type,
                             uniform BSDF_EvalFunc eval,
                             uniform BSDF_SampleFunc sample,
                             const varying linear3f* uniform frame)
{
  self->albedo = albedo;
  self->type = type;
  self->eval = eval;
  self->sample = sample;
  self->frame = frame;
}

inline vec3f getN(const varying BSDF* uniform bsdf)
{
  return bsdf->frame->vz;
}

inline linear3f getFrame(const varying BSDF* uniform bsdf)
{
  return *bsdf->frame;
}
