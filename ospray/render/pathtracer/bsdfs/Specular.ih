// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "BSDF.ih"

// uses a variant of Blinn-Phong BRDF:
// f = r*(n+2)/(4pi(2-2^(-n/2)))*cos(HN)^n/cos(LN)
struct Specular
{
  BSDF super;

  vec3f ks; // reflectivity albedo, including normalization
  vec3f weight; // = constant part of f * cosNL/pdf
  float ns; // exponent
};

inline BSDF_EvalRes Specular_eval(const varying BSDF* uniform super,
                                  const vec3f& wo, const vec3f& wi)
{
  const varying Specular* uniform self = (const varying Specular* uniform)super;
  BSDF_EvalRes res;

  const vec3f N = getN(super);
  const float cosThetaO = dot(wo, N);
  const float cosThetaI = dot(wi, N);
  if (cosThetaO <= 0.0f || cosThetaI <= 0.0f)
    return make_BSDF_EvalRes_zero();

  const vec3f wh = normalize(wo + wi);
  const float cosThetaH = dot(wh, N);
  res.pdf = powerCosineSampleHemispherePDF(cosThetaH, self->ns)
    * rcp(4.0f * dot(wo, wh));
  res.value = self->ks * powf(cosThetaH, self->ns);

  return res;
}

inline BSDF_SampleRes Specular_sample(const varying BSDF* uniform super,
                                      const vec3f& wo, const vec2f& s, float ss)
{
  const varying Specular* uniform self = (const varying Specular* uniform)super;
  BSDF_SampleRes res;

  const vec3f wh_local = powerCosineSampleHemisphere(self->ns, s);
  const vec3f wh = getFrame(super) * wh_local;
  const float cosThetaOH = dot(wo, wh);
  res.wi = reflect(wo, wh, cosThetaOH);

  const float cosThetaI = dot(res.wi, getN(super));
  if (cosThetaI <= 0.0f) // below surface?
    return make_BSDF_SampleRes_zero();

  const float cosThetaH = wh_local.z;
  res.pdf = powerCosineSampleHemispherePDF(cosThetaH, self->ns)
    * rcp(4.0f * cosThetaOH);
  res.type = BSDF_GLOSSY_REFLECTION;
  res.weight = self->weight * cosThetaOH;

  return res;
}

inline void Specular_Constructor(varying Specular* uniform self,
                                 const varying linear3f* uniform frame,
                                 vec3f R,
                                 float exp_)
{
  BSDF_Constructor(&self->super, BSDF_GLOSSY_REFLECTION,
                   Specular_eval, Specular_sample, frame);

  // convert from Phong exponent to Blinn
  self->ns = exp_ * 4.f;
  const float tmp = (self->ns + 2.f) * rcp(2.f - exp(self->ns * -lntwo_over_two));
  self->ks = R * (one_over_four_pi * tmp);
  self->weight = R * (2.f * tmp * rcp(self->ns + 1.f));
}

inline varying BSDF* uniform Specular_create(uniform ShadingContext* uniform ctx,
                                             const varying linear3f* uniform frame,
                                             vec3f R,
                                             float exp_)
{
  varying Specular* uniform self =
    (varying Specular* uniform)ShadingContext_alloc(ctx, sizeof(Specular));
  Specular_Constructor(self, frame, R, exp_);
  return &self->super;
}
