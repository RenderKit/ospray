// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "BSDF.ih"
#include "Fresnel.ih"

struct Conductor
{
  BSDF super;

  uniform Fresnel *uniform fresnel;
};

inline BSDF_EvalRes Conductor_eval(const varying BSDF* uniform super,
                                   const vec3f& wo, const vec3f& wi)
{
  return make_BSDF_EvalRes_zero();
}

inline BSDF_SampleRes Conductor_sample(const varying BSDF* uniform super,
                                       const vec3f& wo, const vec2f& s, float ss)
{
  const varying Conductor* uniform self = (const varying Conductor* uniform)super;
  BSDF_SampleRes res;
  res.wi = reflect(wo, getN(super));
  res.pdf = inf;
  res.type = BSDF_SPECULAR_REFLECTION;
  res.weight = self->fresnel->eval(self->fresnel, dot(wo, getN(super)));
  return res;
}

inline varying BSDF* uniform Conductor_create(uniform ShadingContext* uniform
    ctx, const varying linear3f* uniform frame, Fresnel* uniform fresnel)
{
  varying Conductor* uniform self =
    (varying Conductor* uniform)ShadingContext_alloc(ctx, sizeof(Conductor));

  BSDF_Constructor(&self->super, BSDF_SPECULAR_REFLECTION, Conductor_eval,
      Conductor_sample, frame);
  self->fresnel = fresnel;

  return &self->super;
}
