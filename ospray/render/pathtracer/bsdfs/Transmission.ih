// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "BSDF.ih"

struct Transmission
{
  BSDF super;

  /*! Transmission coefficient of the material. The range is [0,1]
   *  where 0 means total absorption and 1 means total
   *  transmission. */
  vec3f T;
};

inline BSDF_EvalRes Transmission_eval(const varying BSDF* uniform super,
                                      const vec3f& wo, const vec3f& wi)
{
  return make_BSDF_EvalRes_zero();
}

inline BSDF_SampleRes Transmission_sample(const varying BSDF* uniform super,
                                          const vec3f& wo, const vec2f& s, float ss)
{
  const varying Transmission* uniform self = (const varying Transmission* uniform)super;
  BSDF_SampleRes res;

  res.wi = neg(wo);
  res.pdf = inf;
  res.type = BSDF_SPECULAR_TRANSMISSION;
  res.weight = self->T;
  return res;
}

inline void Transmission_Constructor(varying Transmission* uniform self, const varying linear3f* uniform frame,
                                     const vec3f& T)
{
  BSDF_Constructor(&self->super, BSDF_SPECULAR_TRANSMISSION,
                   Transmission_eval, Transmission_sample,
                   frame);
  self->T = T;
}

inline varying BSDF* uniform Transmission_create(uniform ShadingContext* uniform ctx, const varying linear3f* uniform frame,
                                                 const vec3f& T)
{
  varying Transmission* uniform self = (varying Transmission* uniform)ShadingContext_alloc(ctx, sizeof(Transmission));
  Transmission_Constructor(self, frame, T);
  return &self->super;
}
