// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "MicrofacetDistribution.ih"

// GGX (Trowbridge-Reitz) microfacet distribution
// [Walter et al., 2007, "Microfacet Models for Refraction through Rough Surfaces"]
// [Heitz, 2014, "Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs"]
// [Heitz and d'Eon, 2014, "Importance Sampling Microfacet-Based BSDFs using the Distribution of Visible Normals"]
struct GGXDistribution
{
  float alpha;
};

inline GGXDistribution make_GGXDistribution(float alpha)
{
  GGXDistribution m;
  m.alpha = alpha;
  return m;
}

// D(\omega_m) = \frac{\alpha^2}{\pi \cos^4\theta_m (\alpha^2 + \tan^2\theta_m)^2}
inline float eval(const GGXDistribution& self,
                  float cosTheta)
{
  float alpha2 = sqr(self.alpha);
  float tmp = (alpha2*cosTheta - cosTheta) * cosTheta + 1.f;
  return alpha2 * rcp(pi*sqr(tmp));
}

// p(\omega_m) = D(\omega_m) \cos\theta_m
inline float eval(const GGXDistribution& self,
                  float cosTheta, float& pdf)
{
  float D = eval(self, cosTheta);
  pdf = D * abs(cosTheta);
  return D;
}

// \theta_m = \arctan \left( \frac{\alpha\sqrt{\xi_1}}{\sqrt{1-\xi_1}} \right)
// \phi_m   = 2\pi \xi_2
// p(\omega_m) = D(\omega_m) \cos\theta_m
inline vec3f sample(const GGXDistribution& self,
                    float& pdf, const vec2f& s)
{
  float alpha2 = sqr(self.alpha);
  float tanTheta2 = alpha2*s.x * rcp(1.f-s.x);
  float cosTheta = rsqrt(1.f + tanTheta2);
  float sinTheta = cos2sin(cosTheta);

  float phi = 2.f*pi * s.y;

  float cosTheta3 = sqr(cosTheta)*cosTheta;
  pdf = alpha2 * rcp(pi * cosTheta3 * sqr(alpha2+tanTheta2));

  float sinPhi, cosPhi;
  sincos(phi, &sinPhi, &cosPhi);

  float x = cosPhi * sinTheta;
  float y = sinPhi * sinTheta;
  float z = cosTheta;
  return make_vec3f(x,y,z);
}

// Smith Lambda function [Heitz, 2014]
// \Lambda(\omega_o) = \frac{-1 + \sqrt{1+\frac{1}{a^2}}}{2}
// a = \frac{1}{\alpha \tan\theta_o}
inline float Lambda(const GGXDistribution& self,
                    float cosTheta)
{
  float alpha2 = sqr(self.alpha);
  float cosTheta2 = sqr(cosTheta);
  float tanTheta2 = (1.f-cosTheta2) * rcp(cosTheta2);
  return 0.5f * (-1.f + sqrt(1.f+alpha2*tanTheta2));
}

inline float G1(const GGXDistribution& self,
                float cosThetaO, float cosThetaOH)
{
  if (cosThetaO * cosThetaOH <= 0.f)
    return 0.f;

  return rcp(1.f + Lambda(self, cosThetaO));
}

// Smith's height-correlated masking-shadowing function
// [Heitz, 2014, "Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs"]
inline float G2(const GGXDistribution& self,
                float cosThetaO, float cosThetaI, float cosThetaOH, float cosThetaIH)
{
  if (cosThetaO * cosThetaOH <= 0.f || cosThetaI * cosThetaIH <= 0.f)
    return 0.f;

  return rcp(1.f + Lambda(self, cosThetaO) + Lambda(self, cosThetaI));
}

inline float evalVisible(const GGXDistribution& self,
                         float cosThetaH, float cosThetaO, float cosThetaOH, float& pdf)
{
  float D = eval(self, cosThetaH);
  pdf = G1(self, cosThetaO, cosThetaOH) * abs(cosThetaOH) * D / abs(cosThetaO);
  return D;
}

// Visible normal sampling code for the alpha=1 case
inline vec2f sampleVisible11(const GGXDistribution& self,
                             float thetaI, const vec2f& s)
{
  vec2f slope;

  // Special case (normal incidence)
  if (thetaI < 1e-4f)
  {
    float sinPhi, cosPhi;
    float r = sqrt_safe(s.x / (1 - s.x));
    sincos(2.f * pi * s.y, &sinPhi, &cosPhi);
    return make_vec2f(r * cosPhi, r * sinPhi);
  }

  // Precomputations
  float tanThetaI = tan(thetaI);
  float a = rcp(tanThetaI);
  float G1 = 2.f / (1.f + sqrt_safe(1.f + rcp(a*a)));

  // Sample X component
  float A = 2.f * s.x / G1 - 1.f;
  float tmp = rcp(A*A - 1.f);
  tmp = min(tmp, 1e10f);
  float B = tanThetaI;
  float D = sqrt_safe(B*B*tmp*tmp - (A*A - B*B) * tmp);
  float slopeX1 = B * tmp - D;
  float slopeX2 = B * tmp + D;
  slope.x = (A < 0.f || slopeX2 > rcp(tanThetaI)) ? slopeX1 : slopeX2;

  // Sample Y component
  float S = (s.y > 0.5f) ? 1.f : -1.f;
  float sy = S * 2.f * (s.y - 0.5f);

  float z = (sy * (sy * (sy * 0.27385f - 0.73369f) + 0.46341f)) /
    (sy * (sy * (sy * 0.093073f + 0.309420f) - 1.f) + 0.597999f);

  slope.y = S * z * sqrt(1.f + slope.x*slope.x);

  return slope;
}

inline vec3f sampleVisible(const GGXDistribution& self,
                           vec3f wo, float& pdf, const vec2f& s)
{
  // Stretch wo
  wo = normalize(make_vec3f(self.alpha * wo.x, self.alpha * wo.y, wo.z));

  // Compute polar coordinates
  bool valid = wo.z < 0.99999f;
  float theta = valid ? acos(wo.z) : 0.f;
  float phi = valid ? atan2(wo.y, wo.x) : 0.f;
  float sinPhi, cosPhi;
  sincos(phi, &sinPhi, &cosPhi);

  // Sample P22_{wo}(slope.x, slope.y, 1, 1)
  vec2f slope = sampleVisible11(self, theta, s);

  // Rotate
  slope = make_vec2f(
    cosPhi * slope.x - sinPhi * slope.y,
    sinPhi * slope.x + cosPhi * slope.y);

  // Unstretch
  slope.x *= self.alpha;
  slope.y *= self.alpha;

  // Compute normal
  vec3f m = normalize(make_vec3f(-slope.x, -slope.y, 1.f));

  // Compute pdf
  pdf = G1(self, wo.z, dot(wo, m)) * abs(dot(wo, m)) * eval(self, m.z) / abs(wo.z);
  return m;
}

