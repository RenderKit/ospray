// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "math/LinearSpace.ih"

#define SHADINGCONTEXT_SIZE      (programCount*2048)
#define SHADINGCONTEXT_ALIGNMENT 64

struct ShadingContext
{
  /*! Data storage. Has to be at the beginning of the class due to alignment. */
  uniform int8 data[SHADINGCONTEXT_SIZE]; //!< Storage for BSDFs
  uniform uint32 size;                    //!< Number of bytes occupied in storage

  varying int dummy; // FIXME: needed to force correct alignment
};

inline void ShadingContext_Constructor(uniform ShadingContext* uniform self)
{
  self->size = 0;
}

/*! Allocates aligned data. */
inline void* uniform ShadingContext_alloc(uniform ShadingContext* uniform self, uniform uint32 size)
{
  //print("ShadingContext_alloc: %, %\n", this->size, size);
  void* uniform ptr = &self->data[self->size];
  self->size = (self->size + size + SHADINGCONTEXT_ALIGNMENT - 1) & ((uint32)(-SHADINGCONTEXT_ALIGNMENT));
  if (self->size > SHADINGCONTEXT_SIZE)
    print("#osp:PT: out of memory for ShadingContext allocation!\n");
  return ptr;
}

inline varying linear3f* uniform LinearSpace3f_create(uniform ShadingContext* uniform ctx, const linear3f& l)
{
  varying linear3f* uniform ptr = (varying linear3f* uniform)ShadingContext_alloc(ctx, sizeof(linear3f));
  *ptr = l;
  return ptr;
}
