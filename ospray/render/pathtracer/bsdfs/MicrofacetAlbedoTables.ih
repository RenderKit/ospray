// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use self file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "math/interpolation.ih"

// Directional and average albedo tables for microfacet BSDFs
// [Kulla and Conty, 2017, "Revisiting Physically Based Shading at Imageworks"]

// Microfacet GGX albedo table
#define MICROFACET_ALBEDO_TABLE_SIZE 32
extern uniform float* uniform MicrofacetAlbedoTable_dir; // directional 2D table (cosThetaO, roughness)
extern uniform float* uniform MicrofacetAlbedoTable_avg; // average 1D table (roughness)

// Microfacet GGX dielectric albedo table
#define MICROFACET_DIELECTRIC_ALBEDO_TABLE_SIZE 16
#define MICROFACET_DIELECTRIC_ALBEDO_TABLE_MIN_IOR 1.f
#define MICROFACET_DIELECTRIC_ALBEDO_TABLE_MAX_IOR 3.f
// eta in [1/3, 1]
extern uniform float* uniform MicrofacetDielectricAlbedoTable_dir; // directional 3D table (cosThetaO, eta, roughness)
extern uniform float* uniform MicrofacetDielectricAlbedoTable_avg; // average 2D table (eta, roughness)
// eta in [1, 3]
extern uniform float* uniform MicrofacetDielectricRcpEtaAlbedoTable_dir; // directional 3D table (cosThetaO, eta, roughness)
extern uniform float* uniform MicrofacetDielectricRcpEtaAlbedoTable_avg; // average 2D table (eta, roughness)

// Microfacet GGX dielectric reflection-only albedo table
// eta in [1/3, 1]
extern uniform float* uniform MicrofacetDielectricReflectionAlbedoTable_dir; // directional 3D table (cosThetaO, eta, roughness)
extern uniform float* uniform MicrofacetDielectricReflectionAlbedoTable_avg; // average 2D table (eta, roughness)
// eta in [1, 3]
//extern uniform float* uniform MicrofacetDielectricReflectionRcpEtaAlbedoTable_dir; // directional 3D table (cosThetaO, eta, roughness)
//extern uniform float* uniform MicrofacetDielectricReflectionRcpEtaAlbedoTable_avg; // average 2D table (eta, roughness)

// Microfacet sheen albedo table
#define MICROFACET_SHEEN_ALBEDO_TABLE_SIZE 16
extern uniform float* uniform MicrofacetSheenAlbedoTable_dir; // directional 2D table (cosThetaO, roughness)

void precomputeMicrofacetAlbedoTables();

inline float MicrofacetAlbedoTable_eval(float cosThetaO, float roughness)
{
  const uniform int size = MICROFACET_ALBEDO_TABLE_SIZE;
  const vec2f p = make_vec2f(cosThetaO, roughness) * (size-1);
  return interp2DLinear(p, MicrofacetAlbedoTable_dir, make_vec2i(size));
}

inline float MicrofacetAlbedoTable_evalAvg(float roughness)
{
  const uniform int size = MICROFACET_ALBEDO_TABLE_SIZE;
  const float x = roughness * (size-1);
  return interp1DLinear(x, MicrofacetAlbedoTable_avg, size);
}

inline float MicrofacetDielectricAlbedoTable_eval(float cosThetaO, float eta, float roughness)
{
  const uniform int size = MICROFACET_DIELECTRIC_ALBEDO_TABLE_SIZE;

  if (eta <= 1.f)
  {
    const uniform float minEta = rcp(MICROFACET_DIELECTRIC_ALBEDO_TABLE_MAX_IOR);
    const uniform float maxEta = rcp(MICROFACET_DIELECTRIC_ALBEDO_TABLE_MIN_IOR);
    const float etaParam = (eta - minEta) / (maxEta - minEta);
    const vec3f p = make_vec3f(cosThetaO, etaParam, roughness) * (size-1);
    return interp3DLinear(p, MicrofacetDielectricAlbedoTable_dir, make_vec3i(size));
  }
  else
  {
    const uniform float minEta = MICROFACET_DIELECTRIC_ALBEDO_TABLE_MIN_IOR;
    const uniform float maxEta = MICROFACET_DIELECTRIC_ALBEDO_TABLE_MAX_IOR;
    const float etaParam = (eta - minEta) / (maxEta - minEta);
    const vec3f p = make_vec3f(cosThetaO, etaParam, roughness) * (size-1);
    return interp3DLinear(p, MicrofacetDielectricRcpEtaAlbedoTable_dir, make_vec3i(size));
  }
}

inline float MicrofacetDielectricAlbedoTable_evalAvg(float eta, float roughness)
{
  const uniform int size = MICROFACET_DIELECTRIC_ALBEDO_TABLE_SIZE;

  if (eta <= 1.f)
  {
    const uniform float minEta = rcp(MICROFACET_DIELECTRIC_ALBEDO_TABLE_MAX_IOR);
    const uniform float maxEta = rcp(MICROFACET_DIELECTRIC_ALBEDO_TABLE_MIN_IOR);
    const float etaParam = (eta - minEta) / (maxEta - minEta);
    const vec2f p = make_vec2f(etaParam, roughness) * (size-1);
    return interp2DLinear(p, MicrofacetDielectricAlbedoTable_avg, make_vec2i(size));
  }
  else
  {
    const uniform float minEta = MICROFACET_DIELECTRIC_ALBEDO_TABLE_MIN_IOR;
    const uniform float maxEta = MICROFACET_DIELECTRIC_ALBEDO_TABLE_MAX_IOR;
    const float etaParam = (eta - minEta) / (maxEta - minEta);
    const vec2f p = make_vec2f(etaParam, roughness) * (size-1);
    return interp2DLinear(p, MicrofacetDielectricRcpEtaAlbedoTable_avg, make_vec2i(size));
  }
}

inline float MicrofacetDielectricReflectionAlbedoTable_eval(float cosThetaO, float eta, float roughness)
{
  const uniform int size = MICROFACET_DIELECTRIC_ALBEDO_TABLE_SIZE;

  //if (eta <= 1.f)
  {
    const uniform float minEta = rcp(MICROFACET_DIELECTRIC_ALBEDO_TABLE_MAX_IOR);
    const uniform float maxEta = rcp(MICROFACET_DIELECTRIC_ALBEDO_TABLE_MIN_IOR);
    const float etaParam = (eta - minEta) / (maxEta - minEta);
    const vec3f p = make_vec3f(cosThetaO, etaParam, roughness) * (size-1);
    return interp3DLinear(p, MicrofacetDielectricReflectionAlbedoTable_dir, make_vec3i(size));
  }
  /*
  else
  {
    const uniform float minEta = MICROFACET_DIELECTRIC_ALBEDO_TABLE_MIN_IOR;
    const uniform float maxEta = MICROFACET_DIELECTRIC_ALBEDO_TABLE_MAX_IOR;
    const float etaParam = (eta - minEta) / (maxEta - minEta);
    const vec3f p = make_vec3f(cosThetaO, etaParam, roughness) * (size-1);
    return interp3DLinear(p, MicrofacetDielectricReflectionRcpEtaAlbedoTable_dir, make_vec3i(size));
  }
  */
}

inline float MicrofacetDielectricReflectionAlbedoTable_evalAvg(float eta, float roughness)
{
  const uniform int size = MICROFACET_DIELECTRIC_ALBEDO_TABLE_SIZE;

  //if (eta <= 1.f)
  {
    const uniform float minEta = rcp(MICROFACET_DIELECTRIC_ALBEDO_TABLE_MAX_IOR);
    const uniform float maxEta = rcp(MICROFACET_DIELECTRIC_ALBEDO_TABLE_MIN_IOR);
    const float etaParam = (eta - minEta) / (maxEta - minEta);
    const vec2f p = make_vec2f(etaParam, roughness) * (size-1);
    return interp2DLinear(p, MicrofacetDielectricReflectionAlbedoTable_avg, make_vec2i(size));
  }
  /*
  else
  {
    const uniform float minEta = MICROFACET_DIELECTRIC_ALBEDO_TABLE_MIN_IOR;
    const uniform float maxEta = MICROFACET_DIELECTRIC_ALBEDO_TABLE_MAX_IOR;
    const float etaParam = (eta - minEta) / (maxEta - minEta);
    const vec2f p = make_vec2f(etaParam, roughness) * (size-1);
    return interp2DLinear(p, MicrofacetDielectricReflectionRcpEtaAlbedoTable_avg, make_vec2i(size));
  }
  */
}

inline float MicrofacetSheenAlbedoTable_eval(float cosThetaO, float roughness)
{
  const uniform int size = MICROFACET_SHEEN_ALBEDO_TABLE_SIZE;
  const vec2f p = make_vec2f(cosThetaO, roughness) * (size-1);
  return interp2DLinear(p, MicrofacetSheenAlbedoTable_dir, make_vec2i(size));
}
