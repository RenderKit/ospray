// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "common/Material.ih"
#include "common/DifferentialGeometry.ih"
#include "common/Ray.ih"
#include "Medium.ih"
#include "render/pathtracer/bsdfs/BSDF.ih"
#include "render/pathtracer/bsdfs/ShadingContext.ih"
#include "texture/TextureParam.ih"

struct PathTraceMaterial;

typedef const varying BSDF* varying (*PathTraceMaterial_GetBSDFFunc)(const uniform PathTraceMaterial* uniform self,
                                                                     uniform ShadingContext* uniform ctx,
                                                                     /*! The point to shade on a surface. */
                                                                     const DifferentialGeometry& dg,
                                                                     /*! The ray arriving at the point to shade. */
                                                                     const Ray& ray,
                                                                     /*! The medium this ray travels inside. */
                                                                     const Medium& currentMedium);

// shortcut: compute transmission of material, for transparent shadows, neglecting refraction
typedef vec3f (*PathTraceMaterial_GetTransparencyFunc)(const uniform PathTraceMaterial* uniform self,
                                                       /*! The point to shade on a surface. */
                                                       const DifferentialGeometry& dg,
                                                       /*! The ray arriving at the point to shade. */
                                                       const Ray& ray,
                                                       /*! The medium this ray travels inside. */
                                                       const Medium& currentMedium);

typedef void (*PathTraceMaterial_SelectNextMediumFunc)(const uniform PathTraceMaterial* uniform self,
                                                       const DifferentialGeometry& dg,
                                                       Medium& currentMedium);

struct PathTraceMaterial
{
  Material material;
  PathTraceMaterial_GetBSDFFunc getBSDF;
  PathTraceMaterial_GetTransparencyFunc getTransparency;
  PathTraceMaterial_SelectNextMediumFunc selectNextMedium;
  vec3f emission;// simple constant (spatially and angular) emission, returns radiance; TODO SV-EDFs
};

void PathTraceMaterial_Constructor(uniform PathTraceMaterial* uniform self,
                                   uniform PathTraceMaterial_GetBSDFFunc getBSDF,
                                   uniform PathTraceMaterial_GetTransparencyFunc getTransparency = NULL,
                                   uniform PathTraceMaterial_SelectNextMediumFunc selectNextMedium = NULL);
                                   // const uniform vec3f emission = { 0.f, 0.f, 0.f }; fails, ISPC issue #1231

inline linear3f makeShadingFrame(const DifferentialGeometry& dg)
{
  vec3f N = dg.Ns;
  vec3f U = normalize(dg.dPds);
  vec3f V = cross(N, U);
  if (dot(V,V) > 0.f)
  {
    V = normalize(V);
    U = cross(V, N);
    return make_LinearSpace3f(U, V, N);
  }
  else
  {
    return frame(N);
  }
}

inline linear3f makeShadingFrame(const linear3f& f, const vec3f& localN)
{
  // in general f is not ortho-normal, thus need to re-normalize
  vec3f N = normalize(f * localN); // transform normal to world space
  vec3f U = f.vx;
  vec3f V = cross(N, U);
  if (dot(V,V) > 0.f)
  {
    V = normalize(V);
    U = cross(V, N);
    return make_LinearSpace3f(U, V, N);
  }
  else
  {
    return frame(N);
  }
}

inline linear3f makeShadingFrame(const DifferentialGeometry& dg, const vec3f& localN)
{
  linear3f f = makeShadingFrame(dg);
  return makeShadingFrame(f, localN);
}

inline linear3f makeShadingFrame(const DifferentialGeometry& dg,
                                 const uniform TextureParam& normalMap,
                                 const uniform linear2f& normalRot,
                                 uniform float normalScale = 1.f)
{
  if (valid(normalMap))
  {
    linear3f f = make_LinearSpace3f(normalize(dg.dPds), normalize(dg.dPdt), dg.Ns);
    // get normal from texture
    vec3f localN = getNormal(normalMap, dg) * make_vec3f(normalScale, normalScale, 1.f);
    // rotate in 2D (tangent space) to account for tc transformations
    vec2f rotN = normalRot * make_vec2f(localN.x, localN.y);
    localN.x = rotN.x;
    localN.y = rotN.y;
    return makeShadingFrame(f, localN);
  }
  else
  {
    return makeShadingFrame(dg);
  }
}
