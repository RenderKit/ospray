// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "common/Material.ih"
#include "common/DifferentialGeometry.ih"
#include "common/Ray.ih"
#include "Medium.ih"
#include "render/pathtracer/bsdfs/BSDF.ih"
#include "render/pathtracer/bsdfs/ShadingContext.ih"

struct PathTraceMaterial;

typedef const varying BSDF* uniform (*PathTraceMaterial_GetBSDFFunc)(const uniform PathTraceMaterial* uniform self,
                                                                     uniform ShadingContext* uniform ctx,
                                                                     /*! The point to shade on a surface. */
                                                                     const DifferentialGeometry& dg,
                                                                     /*! The ray arriving at the point to shade. */
                                                                     const Ray& ray,
                                                                     /*! The medium this ray travels inside. */
                                                                     const Medium& currentMedium);

// shortcut: compute transmission of material, for transparent shadows, neglecting refraction
typedef vec3f (*PathTraceMaterial_GetTransparencyFunc)(const uniform PathTraceMaterial* uniform self,
                                                       /*! The point to shade on a surface. */
                                                       const DifferentialGeometry& dg,
                                                       /*! The ray arriving at the point to shade. */
                                                       const Ray& ray,
                                                       /*! The medium this ray travels inside. */
                                                       const Medium& currentMedium);

typedef void (*PathTraceMaterial_SelectNextMediumFunc)(const uniform PathTraceMaterial* uniform self,
                                                       Medium& currentMedium);

struct PathTraceMaterial
{
  Material material;
  PathTraceMaterial_GetBSDFFunc getBSDF;
  PathTraceMaterial_GetTransparencyFunc getTransparency;
  PathTraceMaterial_SelectNextMediumFunc selectNextMedium;
  vec3f emission;// simple constant (spatially and angular) emission, returns radiance; TODO SV-EDFs
};

void PathTraceMaterial_Constructor(uniform PathTraceMaterial* uniform self,
                                   uniform PathTraceMaterial_GetBSDFFunc getBSDF,
                                   uniform PathTraceMaterial_GetTransparencyFunc getTransparency = NULL,
                                   uniform PathTraceMaterial_SelectNextMediumFunc selectNextMedium = NULL);
                                   // const uniform vec3f emission = { 0.f, 0.f, 0.f }; fails, ISPC issue #1231
