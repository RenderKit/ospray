// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "render/pathtracer/PathStructs.ih"

#include "render/pathtracer/bsdfs/BSDF.ih"
#include "render/pathtracer/volumes/VolumeSampler.ih"

inline bool isSmooth(const PathVertex& pathVertex)
{
  if (pathVertex.type == SURFACE && pathVertex.bsdf   && pathVertex.bsdf->type & SCATTERING_SMOOTH) return true;
  if (pathVertex.type == VOLUME  && pathVertex.volume && isSmoothVolumeVertex(pathVertex)) return true;
  return false;
}

inline float misHeuristic(const PathState& pathState, float pdf1, float pdf2)
{
  if (pathState.disableNEE || pathState.disableFWD)
    return 1.f;

  // power heuristic with beta=2
  const float p = sqr(pdf1) * rcp(sqr(pdf1) + sqr(pdf2));
  // guard against high pdf (including Dirac delta)
  // using the limit when pdf1 approaches inf
  // compare with bit less than sqrt(float_max) (when sqr starts to overflow)
  return pdf1 > 1e17f ? 1.0f : p;
}

inline void updateAuxilliaryData(PathState& pathState, 
                                 const PathVertex& pathVertex, 
                                 ScreenSample& sample)
{
  sample.albedo = pathVertex.albedo;
  if (pathVertex.type == VOLUME) {
    sample.normal = make_vec3f(0.f);
  }
  else if (pathVertex.type == SURFACE)
  {
    vec3f Ns = pathVertex.dg.Ns;
    foreach_unique(f in pathVertex.bsdf)
      if (f != NULL) { Ns = getN(f); }
    sample.normal = Ns;
  }
  pathState.auxFree = false;
}