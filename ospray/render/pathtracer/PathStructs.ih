// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "render/pathtracer/PathTracer.ih"
#include "render/pathtracer/Scattering.ih"

#include "render/pathtracer/materials/Medium.ih"
#include "render/pathtracer/bsdfs/BSDF.ih"

#include "common/World.ih"
#include "common/DifferentialGeometry.ih"
#include "math/random.ih"
#include "volume/VolumetricModel.ih"

enum PathVertexType
{
  SURFACE,
  VOLUME,
  CAMERA,
  LIGHT,
  ENVIRONMENT
};

struct PathVertex
{
  DifferentialGeometry dg;
  vec3f wi;
  vec3f wo;

  vec3f albedo;

  const varying BSDF* bsdf; // only valid if path vertex is surface vertex
  VolumetricModel* volume;  // only valid if path vertex is volume vertex

  float pdf_w; // the pdf of sampling wo in solid angle measure
  PathVertexType type;
};

struct PathContext
{
  const PathTracer* uniform context;
  const World* uniform world;
  const varying vec2f* pixel; 
  varying LDSampler* uniform ldSampler;
  varying RandomSampler* uniform randomSampler;
  uniform int numLights;
  uniform uint32 numBounceSampleDims; // BSDF sample (3D), roulette (1D), light samples (N*2D)
};

struct PathState
{
  bool debug;
  bool disableNEE;          // turn off NEE contribution for debugging purposes
  bool disableFWD;          // turn off FWD contribution for debugging purposes
  bool homogeneousApprox;   // handle volume as homogeneous in its bbox for debugging purposes
  bool straightPath;        // path from camera did not change direction, for alpha and backplate
  bool auxFree;             // normal & albedo buffer were not yet written to
  uniform uint32 depth;
  uniform uint32 sampleDim; // skip: pixel (2D), lens (2D), time (1D)
  vec3f throughput;
  vec3f contribution;
  float time;
  Medium currentMedium;
  float shadowCatcherDist;
};