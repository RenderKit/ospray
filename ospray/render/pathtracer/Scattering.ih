// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "math/vec.ih"

#define SCATTERING_SPECULAR_REFLECTION   (1<<0)  /*!< perfect specular reflection   */
#define SCATTERING_GLOSSY_REFLECTION     (1<<1)  /*!< glossy reflection             */
#define SCATTERING_DIFFUSE_REFLECTION    (1<<2)  /*!< diffuse reflection            */
#define SCATTERING_SPECULAR_TRANSMISSION (1<<3)  /*!< perfect specular transmission */
#define SCATTERING_GLOSSY_TRANSMISSION   (1<<4)  /*!< glossy transmission           */
#define SCATTERING_DIFFUSE_TRANSMISSION  (1<<5)  /*!< diffuse transmission          */

/*! diffuse reflections and transmissions */
#define SCATTERING_DIFFUSE      (SCATTERING_DIFFUSE_REFLECTION   | SCATTERING_DIFFUSE_TRANSMISSION)

/*! glossy reflections and transmissions */
#define SCATTERING_GLOSSY       (SCATTERING_GLOSSY_REFLECTION    | SCATTERING_GLOSSY_TRANSMISSION)

/*! perfect specular reflections and transmissions */
#define SCATTERING_SPECULAR     (SCATTERING_SPECULAR_REFLECTION  | SCATTERING_SPECULAR_TRANSMISSION)

/*! all possible reflections */
#define SCATTERING_REFLECTION   (SCATTERING_DIFFUSE_REFLECTION   | SCATTERING_GLOSSY_REFLECTION   | SCATTERING_SPECULAR_REFLECTION)

/*! all possible transmissions */
#define SCATTERING_TRANSMISSION (SCATTERING_DIFFUSE_TRANSMISSION | SCATTERING_GLOSSY_TRANSMISSION | SCATTERING_SPECULAR_TRANSMISSION)

/*! all non-dirac types */
#define SCATTERING_SMOOTH       (SCATTERING_DIFFUSE | SCATTERING_GLOSSY)

/*! no component set */
#define SCATTERING_NONE         0

/*! all components set */
#define SCATTERING_ALL          (SCATTERING_REFLECTION | SCATTERING_TRANSMISSION)

typedef uint32 Scattering_Type;

struct Scattering_EvalRes
{
  vec3f value; //!< radiance (multiplied by foreshortening factor for BSDFs)
  float pdf;
};

// Note: the pdf of Dirac delta distributions is represented with inf. This is
// possible, because in weight we already cancel the Dirac delta (but still
// account for a changed pdf by e.g. discrete events such as component
// selection).
struct Scattering_SampleRes
{
  vec3f weight; //!< radiance divided by pdf and multiplied by foreshortening factor for BSDFs
  vec3f wi;
  float pdf;
  Scattering_Type type;
};