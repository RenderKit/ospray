// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

// ospray stuff
#include "Group.ih"
#include "Ray.ih"

struct Renderer;

struct Instance
{
  void *cppEquivalent;

  AffineSpace3f xfm;
  AffineSpace3f rcp_xfm;

  Group *group;
};

inline void Instance_postIntersect(const Instance *uniform self,
    const Renderer *uniform renderer,
    varying DifferentialGeometry &dg,
    const varying Ray &ray,
    uniform int64 flags,
    const uniform bool clip = false)
{
  GeometricModel **uniform models =
      clip ? self->group->clipModels : self->group->geometricModels;
  foreach_unique (geomID in ray.geomID) {
    GeometricModel_postIntersect(*(models + geomID), renderer, dg, ray, flags);

    dg.lP = xfmPoint(self->rcp_xfm, dg.P);
    dg.Ns = xfmVector(transposed(self->rcp_xfm.l), dg.Ns);
    dg.Ng = xfmVector(transposed(self->rcp_xfm.l), dg.Ng);
    // scale dg.epsilon by max (epsilon is scalar and thus assumed to be
    // isotropic anyway and hence cannot better handle non-uniform scaling)
    dg.epsilon *= max(abs(self->xfm.l.vx.x),
        max(abs(self->xfm.l.vy.y), abs(self->xfm.l.vz.z)));

    if (flags & DG_TANGENTS) {
      dg.dPds = xfmVector(self->xfm, dg.dPds);
      dg.dPdt = xfmVector(self->xfm, dg.dPdt);
    }
  }
}
