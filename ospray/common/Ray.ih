// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

// ospray
#include "math/AffineSpace.ih"
#include "math/box.ih"
#include "math/vec.ih"
// embree
#include "embree3/rtcore.isph"

struct VolumetricModel;

// NOTE(jda) - this MUST match Embree's RayHit structure layout!
struct Ray
{
  /* ray input data */
  vec3f org; /*!< ray origin */
  float t0;  /*!< start of valid ray interval */

  vec3f dir;   /*!< ray direction */
  float time;  //!< Time of this ray for motion blur

  float t;     /*!< end of valid ray interval, or distance to hit point after
                  'intersect' */
  int32 mask;  //!< Used to mask out objects during traversal
  int32 rayID;
  int32 flags;

  /* hit data */
  vec3f Ng; /*! geometry normal*/

  float u;  //!< Barycentric u coordinate of hit
  float v;  //!< Barycentric v coordinate of hit

  int primID;  //!< primitive ID
  int geomID;  //!< geometry ID
  int instID;  //!< instance ID
};

struct EmbreeIntersectionContext
{
  RTCIntersectContext ectx;
  void *uniform userPtr;
};

// Hit query functions ////////////////////////////////////////////////////////

inline bool noHit(const Ray &ray)
{
  return ray.geomID == RTC_INVALID_GEOMETRY_ID;
}

inline bool hadHit(const Ray &ray)
{
  return !noHit(ray);
}

// Ray initialization /////////////////////////////////////////////////////////

inline void setRay(Ray &ray,
                   const vec3f &ray_org,
                   const vec3f &ray_dir,
                   const float t0,
                   const float t1,
                   const float time = 0.f)
{
  ray.org    = ray_org;
  ray.dir    = ray_dir;
  ray.t0     = t0;
  ray.t      = t1;
  ray.time   = time;
  ray.mask   = -1;
  ray.geomID = -1;
  ray.primID = -1;
  ray.instID = -1;
}

inline void setRay(Ray &ray,
                   const vec3f &ray_org,
                   const vec3f &ray_dir,
                   const float time = 0.f)
{
  setRay(ray, ray_org, ray_dir, 0.f, inf, time);
}

inline void setRay(Ray &ray, const float t0, const float t1)
{
  setRay(ray, ray.org, ray.dir, t0, t1, ray.time);
}

// Ray intersection helpers ///////////////////////////////////////////////////

inline float intersectPlane(const Ray &ray, const uniform vec4f &plane)
{
  const uniform vec3f normal = make_vec3f(plane);
  return (plane.w - dot(ray.org, normal)) * rcpf(dot(ray.dir, normal));
}

inline void intersectBox(const vec3f &org,
                         const vec3f &dir,
                         const uniform box3f &box,
                         float &t0,
                         float &t1)
{
  const vec3f mins = (box.lower - org) * rcp_safe(dir);
  const vec3f maxs = (box.upper - org) * rcp_safe(dir);
  t0               = reduce_max(min(mins, maxs));
  t1               = reduce_min(max(mins, maxs));
}

inline void intersectBox(const Ray &ray,
                         const uniform box3f &box,
                         float &t0,
                         float &t1)
{
  const vec3f mins = (box.lower - ray.org) * rcp_safe(ray.dir);
  const vec3f maxs = (box.upper - ray.org) * rcp_safe(ray.dir);
  t0               = reduce_max(make_vec4f(min(mins, maxs), ray.t0));
  t1               = reduce_min(make_vec4f(max(mins, maxs), ray.t));
}

inline void intersectBox(const Ray &ray,
                         const uniform box3fa &box,
                         float &t0,
                         float &t1)
{
  intersectBox(ray, make_box3f(box), t0, t1);
}

// Ray transformation helpers /////////////////////////////////////////////////

inline void transformRay(Ray &ray, const uniform AffineSpace3f &xfm)
{
  // numbers in original coordinate
  const vec3f t0 = ray.org + ray.t0 * ray.dir;
  const vec3f t  = ray.org + ray.t * ray.dir;
  // numbers for transformed ray
  // -- direction
  ray.org             = xfmPoint(xfm, ray.org);
  ray.dir             = xfmVector(xfm, ray.dir);
  const vec3f rcp_dir = rcp(ray.dir);
  // -- starting and ending positions
  ray.t0 = reduce_max((xfmPoint(xfm, t0) - ray.org) * rcp_dir);
  ray.t  = reduce_min((xfmPoint(xfm, t) - ray.org) * rcp_dir);
  // -- Ng
  ray.Ng = xfmVector(transposed(xfm.l), ray.Ng);
}

inline void transformRay(Ray &ray, AffineSpace3f xfm)
{
  // numbers in original coordinate
  const vec3f t0 = ray.org + ray.t0 * ray.dir;
  const vec3f t  = ray.org + ray.t * ray.dir;
  // numbers for transformed ray
  // -- direction
  ray.org             = xfmPoint(xfm, ray.org);
  ray.dir             = xfmVector(xfm, ray.dir);
  const vec3f rcp_dir = rcp(ray.dir);
  // -- starting and ending positions
  ray.t0 = reduce_max((xfmPoint(xfm, t0) - ray.org) * rcp_dir);
  ray.t  = reduce_min((xfmPoint(xfm, t) - ray.org) * rcp_dir);
  // -- Ng
  ray.Ng = xfmVector(transposed(xfm.l), ray.Ng);
}

// Volume hit structure ///////////////////////////////////////////////////////

struct VolumeInterval
{
  VolumetricModel *volumetricModel;
  range1f interval;
  AffineSpace3f xfm;
  unsigned int primID;
  unsigned int geomID;
  unsigned int instID;
};

inline void initVolumeInterval(VolumeInterval &hit)
{
  hit.volumetricModel = NULL;
  hit.interval.lower  = inf;
  hit.interval.upper  = -inf;
}

inline bool hasInterval(const VolumeInterval &vi)
{
  return !isEmpty(vi.interval);
}

struct VolumeIntervals
{
  unsigned int numVolumeIntervals;
  VolumeInterval intervals[10];
};

inline void initVolumeIntervals(VolumeIntervals &intervals)
{
  intervals.numVolumeIntervals = 0;
  initVolumeInterval(intervals.intervals[0]);
}