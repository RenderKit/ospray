// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "math/vec.ih"

struct Geometry;
struct Material;
struct Renderer;
struct World;

typedef enum
{
  DG_FACEFORWARD = (1 << 0), /*!< face-forward normals */
  DG_NORMALIZE = (1 << 1), /*!< normalize normals */
  DG_NG = (1 << 2), /*!< need geometry normal Ng */
  DG_NS = (1 << 3), /*!< need shading normal Ns */
  DG_COLOR = (1 << 5), /*!< hack for now - need interpolated vertex color */
  DG_TEXCOORD = (1 << 6), /*!< calculate texture coords st */
  DG_TANGENTS = (1 << 7), /*!< calculate tangents, i.e. the partial
                             derivatives of position wrt. texture coordinates */
} DG_PostIntersectFlags;

/*! differential geometry information that gives more detailed
    information on the actual geometry that a ray has hit */
struct DifferentialGeometry
{
  vec3f P; // world space location of the hit-point, includes epsilon offset
           // towards front side
  vec3f lP; // local instance space location of the hit-point
  vec3f Ng; /*!< geometry normal if DG_NG was set, possibly not
               normalized/facefordwarded if DG_NORMALIZE and/or
               DG_FACEFORWARD weren't specified */
  vec3f Ns; /*!< shading normal if DG_NS was set, possibly not
               normalized/facefordwarded if DG_NORMALIZE and/or
               DG_FACEFORWARD weren't specified */
  vec3f dPds; //!< tangent, the partial derivative of the hit-point wrt.
              //!< texcoord s
  vec3f dPdt; //!< bi-tangent, the partial derivative of the hit-point wrt.
              //!< texcoord t
  vec2f st; //!< texture coordinates if DG_TEXCOORD was set
  vec4f color; /*! interpolated vertex color (rgba) if DG_COLOR was set;
                 defaults to vec4f(1.f) if queried but not present in geometry
                 */

  float areaPDF;

  Material *material; /*! pointer to hit-point's material */

  const Renderer *uniform renderer; /*! pointer to renderer being used */

  float epsilon; //!< adaptive epsilon, isotropic in object-space */
};

// assumed precision of intersection routines
#define ulpEpsilon 0x1.fp-21

inline float calcEpsilon(const vec3f &P, const vec3f &dir, float t)
{
  // convert ray-space t to object-/world-space using max(dir) instead of
  // costly length; the error is at most sqrt(3)~1.7, quite acceptable for eps
  return reduce_max(make_vec4f(abs(P), reduce_max(abs(dir)) * t)) * ulpEpsilon;
}

inline float calcEpsilon(const vec3f &P, float dist)
{
  const vec3f dummy_dir = make_vec3f(1.0f);
  return calcEpsilon(P, dummy_dir, dist);
}
