// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

// ospray stuff
#include "../common/Ray.ih"
#include "Instance.ih"

struct World
{
  void *cppEquivalent;

  Instance **instances;
  int32 numInstances;

  RTCScene embreeSceneHandleGeometries;
  RTCScene embreeSceneHandleVolumes;
};

inline void traceRay(const World *uniform world,
                     varying Ray &ray,
                     void *uniform userPtr)
{
  uniform EmbreeIntersectionContext context;
  rtcInitIntersectContext(&context.ectx);
  context.userPtr = userPtr;
  rtcIntersectV(world->embreeSceneHandleGeometries,
                &context.ectx,
                (varying RTCRayHit * uniform) & ray);
}

inline void traceRay(const World *uniform world, varying Ray &ray)
{
  traceRay(world, ray, NULL);
}

inline bool isOccluded(const World *uniform world,
                       varying Ray &ray,
                       void *uniform userPtr)
{
  uniform EmbreeIntersectionContext context;
  rtcInitIntersectContext(&context.ectx);
  context.userPtr = userPtr;
  rtcOccludedV(world->embreeSceneHandleGeometries,
               &context.ectx,
               (varying RTCRay * uniform) & ray);
  return ray.t < ray.t0;
}

inline bool isOccluded(const World *uniform world, varying Ray &ray)
{
  return isOccluded(world, ray, NULL);
}

inline void traceVolumeRay(const World *uniform world,
                           varying Ray &ray,
                           VolumeInterval &interval)
{
  initVolumeInterval(interval);

  VolumeIntervals intervals;
  initVolumeIntervals(intervals);
  
  uniform EmbreeIntersectionContext context;
  rtcInitIntersectContext(&context.ectx);
  context.userPtr = &intervals;
  rtcIntersectV(world->embreeSceneHandleVolumes,
                &context.ectx,
                (varying RTCRayHit * uniform) & ray);

  if (hasInterval(intervals.intervals[0]))
  {
    Instance * instance = *(world->instances + intervals.intervals[0].instID);
    interval.volumetricModel = instance->group->volumetricModels[intervals.intervals[0].geomID];
    interval.xfm             = instance->xfm;
    interval.interval.lower  = intervals.intervals[0].interval.lower;
    interval.interval.upper  = intervals.intervals[0].interval.upper;
  }
}

inline void traceVolumeRay(const World *uniform world,
                           varying Ray &ray,
                           VolumeIntervals &intervals)
{
  initVolumeIntervals(intervals);

  uniform EmbreeIntersectionContext context;
  rtcInitIntersectContext(&context.ectx);
  context.userPtr = &intervals;
  rtcIntersectV(world->embreeSceneHandleVolumes,
                &context.ectx,
                (varying RTCRayHit * uniform) & ray);

  if (intervals.numVolumeIntervals > 0) 
  {
    for (int i = 0; i < intervals.numVolumeIntervals; ++i)
    {
      Instance * instance = *(world->instances + intervals.intervals[i].instID);
      intervals.intervals[i].volumetricModel = instance->group->volumetricModels[intervals.intervals[i].geomID];
      intervals.intervals[i].xfm             = instance->xfm;
    }
  }
}

/*! Perform post-intersect computations, i.e. fill the members of
    DifferentialGeometry. Should only get called for rays that actually hit
    that given world. Variables are calculated according to 'flags', a
    bit-combination of DG_PostIntersectFlags.
    The ray, dg.P, dg.Ng, and dg.Ns are in world-coordinates.
    Color defaults to vec4f(1.f) if queried but not present in geometry.
   */
inline void postIntersect(const World *uniform world,
                          varying DifferentialGeometry &dg,
                          const varying Ray &ray,
                          uniform int64 flags)
{
  dg.primID = ray.primID;
  dg.st     = make_vec2f(ray.u, ray.v);

  dg.materialID = -1;  // make sure this is properly initialized
  dg.material   = NULL;

  if (flags & DG_COLOR)
    dg.color = make_vec4f(1.f);

  if (flags & DG_TANGENTS) {
    dg.dPds = make_vec3f(1.f, 0.f, 0.f);
    dg.dPdt = make_vec3f(0.f, 1.f, 0.f);
  }

  dg.P       = ray.org + ray.t * ray.dir;
  dg.epsilon = 0.f;  // per default no geometry-type specific epsilon

  foreach_unique(instID in ray.instID)
  {
    if (instID != RTC_INVALID_GEOMETRY_ID) {
      Instance *uniform instance = *(world->instances + instID);
      Instance_postIntersect(instance, instID, dg, ray, flags);
    } else {
      dg.Ns = dg.Ng = ray.Ng;
    }
  }

  // merge geometry-type specific epsilon with general epsilon
  dg.epsilon = max(dg.epsilon, calcEpsilon(dg.P, ray.dir, ray.t));

// some useful combinations; enums unfortunately don't work :-(
#define DG_NG_FACEFORWARD (DG_NG | DG_FACEFORWARD)
#define DG_NS_FACEFORWARD (DG_NS | DG_FACEFORWARD)
#define DG_NG_NORMALIZE (DG_NG | DG_NORMALIZE)
#define DG_NS_NORMALIZE (DG_NS | DG_NORMALIZE)

  vec3f ffnng = normalize(dg.Ng);

  if ((flags & DG_NG_NORMALIZE) == DG_NG_NORMALIZE)
    dg.Ng = ffnng;

  if ((flags & DG_NS_NORMALIZE) == DG_NS_NORMALIZE)
    dg.Ns = normalize(dg.Ns);

  const bool flip = dot(ray.dir, dg.Ng) >= 0.f;
  if (flip)
    ffnng = neg(ffnng);

  if ((flags & DG_NG_FACEFORWARD) == DG_NG_FACEFORWARD && flip) {
    if (flip)
      dg.Ng = neg(dg.Ng);
  }

  if ((flags & DG_NS_FACEFORWARD) == DG_NS_FACEFORWARD) {
    if (dot(dg.Ng, dg.Ns) < 0.f)
      dg.Ns = neg(dg.Ns);
  }

  dg.P = dg.P + dg.epsilon * ffnng;
#undef DG_NG_FACEFORWARD
#undef DG_NS_FACEFORWARD
#undef DG_NG_NORMALIZE
#undef DG_NS_NORMALIZE
}
