// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "common/Ray.ih"
#include "rkcommon/math/box.ih"

/*! \file camera.ih Defines the abstract base class of an ISPC-side camera */

struct Camera;

/*! \brief Specifies the input parameters (time, screen, and lens
    samples) required for 'initRay' to generate a primary ray */
struct CameraSample
{
  vec2f screen; /*!< normalized screen sample, from [0..1] */
  vec2f lens; /*!< may be left un-initialized if 'camera.doesDOF' is false */
  float time; /*!< time */
};

/*! \brief Fct pointer type for 'virtual' method that sets a pixel */
// generated ray.dir must be normalized to ensure ray.t is world-space distance
typedef void (*Camera_initRay)(const Camera *uniform,
    varying Ray &ray,
    const varying CameraSample &sample);

/*! \brief Abstract base class for all camera types */
struct Camera
{
  Camera_initRay initRay; /*!< the 'virtual' initRay() method */
  void *cppEquivalent; /*!< pointer back to c++-side of this class */

  bool doesDOF; /*!< indicates whether this camera wants to do
                    depth-of-field (DOF). If so, the 'CameraSample'
                    passed to initRay has to have properly initialized
                    'lens' value; if not, this value can remain
                    unused. */

  vec3f org; //!< camera position
  linear3f frame; //!< camera coordinate frame, i.e. (right, up, neg direction)
  float nearClip; //!< near clipping plane
  box2f subImage; //!< viewable tile / subrange to compute, [0..1]^2 x [0..1]^2
  range1f shutter; //!< camera shutter open start and end time, in [0..1]
};

inline vec2f Camera_subRegion(const Camera *uniform self, const vec2f &screen)
{
  return lerp(screen, self->subImage.lower, self->subImage.upper);
}

inline float Camera_shutterTime(const Camera *uniform self, const float time)
{
  return lerp(time, self->shutter.lower, self->shutter.upper);
}
