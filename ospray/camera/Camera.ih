// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "../common/Ray.ih"
#include "math/box.ih"

/*! \file camera.ih Defines the abstract base class of an ISPC-side camera */

struct Camera;

/*! \brief Specifies the input parameters (time, screen, and lens
    samples) required for 'initRay' to generate a primary ray */
struct CameraSample {
  vec2f screen; /*!< normalized screen sample, from [0..1] */
  vec2f lens;   /*!< may be left un-initialized if 'camera.doesDOF' is false */
  float time;   /*!< time, currently unused */
};

/*! \brief Fct pointer type for 'virtual' method that sets a pixel */
typedef void (*Camera_initRay)(uniform Camera *uniform,
                               varying Ray &ray,
                               const varying CameraSample &sample);

/*! \brief Abstract base class for all camera types */
struct Camera
{
  Camera_initRay initRay; /*!< the 'virtual' initRay() method */
  void *cppEquivalent; /*!< pointer back to c++-side of this class */

  bool doesDOF; /*!< indicates whether this camera wants to do
                    depth-of-field (DOF). If so, the 'CameraSample'
                    passed to initRay has to have properly initialized
                    'lens' value; if not, this value can remain
                    unused. */

  float nearClip; /*!< \brief near clipping plane. */
  box2f subImage; //!< viewable tile / subregion to compute, [0..1]^2 x [0..1]^2
};

inline vec2f Camera_subRegion(const uniform Camera *uniform self, const vec2f &screen)
{
  return lerp(screen, self->subImage.lower, self->subImage.upper);
}
