// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "Volume.ih"
#include "math/AffineSpace.ih"
#include "transferFunction/TransferFunction.ih"

#include "../common/DifferentialGeometry.ih"
#include "../common/Material.ih"
#include "../common/Ray.ih"

struct VolumetricModel
{
  Volume *volume;  //!< instanced Volume

  //! Recommended sampling step size for ray casting based renderers, set by the
  //! underlying volume implementation.
  float samplingStep;

  //! Recommended sampling rate for the renderer.
  float samplingRate;

  //! Color and opacity transfer function.
  TransferFunction *transferFunction;

  box3f boundingBox;

  Material* uniform material;
  
  //! Volume parameters understood by the pathtracer
  vec3f albedo;     // sigma_s/sigma_t = mu_s / mu_t
  float sigma_t;    // extinction cross section = (sigma_s + sigma_a)
};

inline void VolumetricModel_postIntersect(const VolumetricModel *uniform self,
                                          varying DifferentialGeometry &dg,
                                          const varying Ray &ray,
                                          uniform int64 flags)
{
  //Volume *uniform volume = self->volume;
  //geom->postIntersect(geom, dg, ray, flags);

  dg.areaPDF = 0.f;
  dg.materialID = 0;
  dg.material = self->material;
  dg.color = make_vec4f(0.f);
}

// Helper functions ///////////////////////////////////////////////////////////

inline vec3f VolumetricModel_getColor(const VolumetricModel *uniform volume,
                                     const float sample)
{
  return volume->transferFunction->getColorForValue(volume->transferFunction,
                                                    sample);
}

inline float VolumetricModel_getOpacity(const VolumetricModel *uniform volume,
                                       const float sample)
{
  return volume->transferFunction->getOpacityForValue(volume->transferFunction,
                                                      sample);
}
