// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "Volume.ih"
#include "math/AffineSpace.ih"
#include "transferFunction/TransferFunction.ih"

#include "../common/DifferentialGeometry.ih"
#include "../common/Ray.ih"

struct VolumetricModel
{
  Volume *volume; //!< instanced Volume

  //! Color and opacity transfer function.
  TransferFunction *transferFunction;

  //! value selector
  VKLValueSelector vklValueSelector;

  box3f boundingBox;

  //! Volume parameters understood by the pathtracer
  float densityScale;
  float anisotropy; // the anisotropy of the volume's phase function
                    // (Heyney-Greenstein)
  float gradientShadingScale;
};

inline void VolumetricModel_postIntersect(const VolumetricModel *uniform self,
    varying DifferentialGeometry &dg,
    const varying Ray &ray,
    uniform int64 flags)
{
  dg.areaPDF = 0.f;
  dg.color = make_vec4f(0.f);
}
