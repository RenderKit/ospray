// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "common/OSPCommon.ih"
#include "common/Ray.ih"

//! \brief A spatial acceleration structure over a BlockBrickedVolume, used
//!  for opacity and variance based space skipping.
//!
struct GridAccelerator {

  //! Grid size in bricks per dimension with padding to the nearest brick.
  uniform vec3i brickCount;

  //! The range of volumetric values within a grid cell.
  vec2f *uniform cellRange;

  //! Grid size in cells per dimension.
  uniform vec3i gridDimensions;

  //! Pointer to the associated volume.
  void *uniform volume;

};

//! Create an instance of the accelerator and encode the volume.
GridAccelerator *uniform GridAccelerator_createInstance(void *uniform volume);

//! Destroy an instance of the accelerator and free all associated memory.
void GridAccelerator_destroy(GridAccelerator *uniform accelerator);

//! Step a ray through the accelerator until a cell with visible volumetric
//! elements is found.
void GridAccelerator_intersect(GridAccelerator *uniform accelerator,
                               uniform float step,
                               varying Ray &ray);

//! Step a ray through the accelerator until a cell with visible volumetric
//! elements is found.
void GridAccelerator_intersectAdaptive(GridAccelerator *uniform accelerator,
                               const varying float step,
                               varying Ray &ray);

//! Step a ray through the accelerator until a cell containing the isovalue is
//! found.
void GridAccelerator_intersectIsosurface(GridAccelerator *uniform accelerator,
                                         uniform float step,
                                         uniform float *uniform isovalues,
                                         uniform int numIsovalues,
                                         varying Ray &ray);
