// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "common/OSPCommon.ih"
#include "volume/Volume.ih"

struct GridAccelerator;

//! \brief Base class for all structured volume types
/*! \detailed Variables and methods common to all subtypes of the
  StructuredVolume class (this struct must be the first field of a
  struct representing a "derived" class). */
struct StructuredVolume {

  //! Fields common to all Volume subtypes (must be the first entry of this struct).
  Volume super;

  //! Volume size in voxels per dimension.
  uniform vec3i dimensions;

  //! Grid origin.
  uniform vec3f gridOrigin;

  //! Grid spacing in each dimension.
  uniform vec3f gridSpacing;

  //! Spatial acceleration structure used for space skipping.
  GridAccelerator *uniform accelerator;

  //! The largest coordinate value (in local coordinates) still inside the volume.
  uniform vec3f localCoordinatesUpperBound;

  //! Voxel data accessor.
  void (*uniform getVoxel)(void *uniform volume, const varying vec3i &index, varying float &value);

  //! Transform from local coordinates to world coordinates using the volume's grid definition.
  void (*uniform transformLocalToWorld)(StructuredVolume *uniform volume, 
                                        const varying vec3f &localCoordinates, 
                                        varying vec3f &worldCoordinates);

  //! Transform from world coordinates to local coordinates using the volume's grid definition.
  void (*uniform transformWorldToLocal)(StructuredVolume *uniform volume, 
                                        const varying vec3f &worldCoordinates, 
                                        varying vec3f &localCoordinates);

};

void StructuredVolume_Constructor(StructuredVolume *uniform volume, 
                                  /*! pointer to the c++-equivalent class of this entity */
                                  void *uniform cppEquivalent,
                                  const uniform vec3i &dimensions);
