// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

/*! ispc equivalent of the c++-side kdtree that we build over the
    boxes */
struct KDTreeNode
{
  uint32 dim_and_ofs;
  uint32 pos_or_numItems;
};

inline uint32 getDim(const KDTreeNode & node)
{
  return node.dim_and_ofs >> 30;
}

inline uint32 getOfs(const KDTreeNode & node)
{
  return node.dim_and_ofs & ((1<<30)-1);
}

inline bool isLeaf(const KDTreeNode & node)
{
  return getDim(node) == 3;
}

inline float getPos(const KDTreeNode & node)
{
  return floatbits(node.pos_or_numItems);
}

inline float getNumItems(const KDTreeNode & node)
{
  return node.pos_or_numItems;
}

inline uniform uint32 getDim(const uniform KDTreeNode & node)
{
  return node.dim_and_ofs >> 30;
}

inline uniform uint32 getOfs(const uniform KDTreeNode & node)
{
  return node.dim_and_ofs & ((1<<30)-1);
}

inline uniform bool isLeaf(const uniform KDTreeNode & node)
{
  return getDim(node) == 3;
}

inline uniform float getPos(const uniform KDTreeNode & node)
{
  return floatbits(node.pos_or_numItems);
}

inline uniform float getNumItems(const uniform KDTreeNode & node)
{
  return node.pos_or_numItems;
}