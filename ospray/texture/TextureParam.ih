// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "Texture2D.ih"
#include "math/AffineSpace.ih"

//! Texture2D including coordinate transformation, plus helpers

enum TransformFlags
{
  TRANSFORM_FLAG_NONE = 0x0,
  TRANSFORM_FLAG_2D = 0x1,
  TRANSFORM_FLAG_3D = 0x2
};

struct TextureParam
{
  Texture2D *ptr;
  TransformFlags transformFlags;
  affine2f xform2f;
  affine3f xform3f;
};

inline uniform TextureParam make_TextureParam()
{
  uniform TextureParam t;
  t.ptr = NULL;
  t.transformFlags = TRANSFORM_FLAG_NONE;
  t.xform2f = make_AffineSpace2f_identity();
  t.xform3f = make_AffineSpace3f_identity();
  return t;
}

inline uniform bool valid(const uniform TextureParam uniform &tex)
{
  return tex.ptr;
}

inline uniform bool hasAlpha(const uniform TextureParam uniform &tex)
{
  return hasAlpha(tex.ptr);
}

#define TEXTURE_TRANSFORM(fn)                                                  \
  if (!tp.transformFlags)                                                      \
    return fn(tp.ptr, dg);                                                     \
                                                                               \
  DifferentialGeometry xfmDg = dg;                                             \
  if (tp.transformFlags & TRANSFORM_FLAG_2D)                                   \
    xfmDg.st = tp.xform2f * dg.st;                                             \
  if (tp.transformFlags & TRANSFORM_FLAG_3D)                                   \
    xfmDg.lP = xfmPoint(tp.xform3f, dg.lP);                                    \
  return fn(tp.ptr, xfmDg)

inline float get1f(const uniform TextureParam uniform &tp,
    const varying DifferentialGeometry &dg)
{
  TEXTURE_TRANSFORM(get1f);
}

inline float get1f(const uniform TextureParam uniform &tp,
    const varying DifferentialGeometry &dg,
    const varying float defaultValue)
{
  if (!valid(tp))
    return defaultValue;

  TEXTURE_TRANSFORM(get1f);
}

inline vec3f get3f(const uniform TextureParam uniform &tp,
    const varying DifferentialGeometry &dg)
{
  TEXTURE_TRANSFORM(get3f);
}

inline vec3f get3f(const uniform TextureParam uniform &tp,
    const varying DifferentialGeometry &dg,
    const varying vec3f defaultValue)
{
  if (!valid(tp))
    return defaultValue;

  TEXTURE_TRANSFORM(get3f);
}

inline vec4f get4f(const uniform TextureParam uniform &tp,
    const varying DifferentialGeometry &dg)
{
  TEXTURE_TRANSFORM(get4f);
}

inline vec4f get4f(const uniform TextureParam uniform &tp,
    const varying DifferentialGeometry &dg,
    const varying vec4f defaultValue)
{
  if (!valid(tp))
    return defaultValue;

  TEXTURE_TRANSFORM(get4f);
}

inline vec3f getNormal(const uniform TextureParam uniform &tp,
    const varying DifferentialGeometry &dg)
{
  TEXTURE_TRANSFORM(getNormal);
}
