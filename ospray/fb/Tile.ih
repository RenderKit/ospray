// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "common/OSPCommon.ih"
#include "rkcommon/math/box.ih"

/*! a screen tile. the memory layout of this class has to _exactly_
  match the (C++-)one in tile.h */
struct Tile
{
  uniform range2i region;
  uniform vec2i fbSize;
  uniform vec2f rcp_fbSize;
  uniform int32 generation;
  uniform int32 children;
  uniform int32 sortOrder;
  uniform int32 accumID;
  uniform float pad[4]; // padding to match the varying tile layout
  uniform float r[TILE_SIZE * TILE_SIZE]; // red
  uniform float g[TILE_SIZE * TILE_SIZE]; // green
  uniform float b[TILE_SIZE * TILE_SIZE]; // blue
  uniform float a[TILE_SIZE * TILE_SIZE]; // alpha
  uniform float z[TILE_SIZE * TILE_SIZE]; // depth
  uniform float nx[TILE_SIZE * TILE_SIZE]; // normal x
  uniform float ny[TILE_SIZE * TILE_SIZE]; // normal y
  uniform float nz[TILE_SIZE * TILE_SIZE]; // normal z
  uniform float ar[TILE_SIZE * TILE_SIZE]; // albedo red
  uniform float ag[TILE_SIZE * TILE_SIZE]; // albedo green
  uniform float ab[TILE_SIZE * TILE_SIZE]; // albedo blue
};

struct VaryingTile
{
  uniform range2i region; // 4 ints
  uniform vec2i fbSize; // 2 ints
  uniform vec2f rcp_fbSize; // 2 floats
  uniform int32 generation;
  uniform int32 children;
  uniform int32 sortOrder;
  uniform int32 accumID;
  uniform float pad[4]; // explicit padding to match on SSE, this padding is
                        // implicitly added on AVX and AVX512 to align the
                        // vectors though. We need it here to match on SSE
  varying float r[TILE_SIZE * TILE_SIZE / programCount];
  varying float g[TILE_SIZE * TILE_SIZE / programCount];
  varying float b[TILE_SIZE * TILE_SIZE / programCount];
  varying float a[TILE_SIZE * TILE_SIZE / programCount];
  varying float z[TILE_SIZE * TILE_SIZE / programCount];
  varying float nx[TILE_SIZE * TILE_SIZE / programCount];
  varying float ny[TILE_SIZE * TILE_SIZE / programCount];
  varying float nz[TILE_SIZE * TILE_SIZE / programCount];
  varying float ar[TILE_SIZE * TILE_SIZE / programCount];
  varying float ag[TILE_SIZE * TILE_SIZE / programCount];
  varying float ab[TILE_SIZE * TILE_SIZE / programCount];
};

inline void setRGBA(uniform Tile &tile,
    const varying uint32 i,
    const varying vec3f rgb,
    const varying float alpha = 0.f)
{
  tile.r[i] = rgb.x;
  tile.g[i] = rgb.y;
  tile.b[i] = rgb.z;
  tile.a[i] = alpha;
}

inline void setRGBAZ(uniform Tile &tile,
    const varying uint32 i,
    const varying vec3f rgb,
    const varying float alpha,
    const varying float z)
{
  tile.r[i] = rgb.x;
  tile.g[i] = rgb.y;
  tile.b[i] = rgb.z;
  tile.a[i] = alpha;
  tile.z[i] = z;
}

inline void setRGBA(
    uniform Tile &tile, const varying uint32 i, const varying vec4f rgba)
{
  tile.r[i] = rgba.x;
  tile.g[i] = rgba.y;
  tile.b[i] = rgba.z;
  tile.a[i] = rgba.w;
}

inline void setNormalAlbedo(
    uniform Tile &tile, const uint32 i, const vec3f normal, const vec3f albedo)
{
  tile.nx[i] = normal.x;
  tile.ny[i] = normal.y;
  tile.nz[i] = normal.z;
  tile.ar[i] = albedo.x;
  tile.ag[i] = albedo.y;
  tile.ab[i] = albedo.z;
}
