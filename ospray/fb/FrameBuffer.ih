// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "Tile.ih"
/*! \file framebuffer.ih Defines the abstract base class of an ISPC frame buffer */

struct FrameBuffer;

/*! app-mappable format of the color buffer. make sure that this
  matches the definition on the ISPC side */
typedef enum { 
  ColorBufferFormat_NONE, /*!< app will never map the color buffer (e.g., for a
                            framebuffer attached to a display wall that will likely
                            have a different res that the app has...) */
  ColorBufferFormat_RGBA_UINT8, /*! app will map in RGBA, one uint8 per channel */
  ColorBufferFormat_RGB_UINT8, /*! app will map in RGBA, one uint8 per channel */
  ColorBufferFormat_RGBA_FLOAT32, /*! app will map in RBGA, one float per channel */
} FrameBuffer_ColorBufferFormat;
    

struct FrameBuffer 
{
  vec2i size; /*!< size (width x height) of frame buffer, in pixels */
  vec2f rcpSize; /*! one over size (precomputed) */
  int32 frameID;

  FrameBuffer_ColorBufferFormat colorBufferFormat;

  void *cClassPtr; /*!< pointer back to c++-side of this class */
};



/*! helper function to convert float-color into rgba-uint format */
inline uint32 cvt_uint32(const float f)
{
  return (int32)(255.f * clamp(f, 0.f, 1.f));
}

/*! helper function to convert float-color into rgba-uint format */
inline uint32 cvt_uint32(const vec4f &v)
{
  return 
    (cvt_uint32(v.x) << 0)  |
    (cvt_uint32(v.y) << 8)  |
    (cvt_uint32(v.z) << 16) |
    (cvt_uint32(v.w) << 24);
}

/*! helper function to convert float-color into rgba-uint format */
inline uint32 cvt_uint32(const vec3f &v)
{
  return 
    (cvt_uint32(v.x) << 0)  |
    (cvt_uint32(v.y) << 8)  |
    (cvt_uint32(v.z) << 16);
}


void FrameBuffer_Constructor(FrameBuffer *uniform self,
                             void *uniform cClassPtr);

void FrameBuffer_set(FrameBuffer *uniform self,
                     const uniform uint32 size_x,
                     const uniform uint32 size_y,
                     int32 uniform colorBufferFormat);
