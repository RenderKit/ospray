// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "vec.ih"

/*! Linear vector space, or a linear transformation */
struct LinearSpace3f 
{
  vec3f vx;
  vec3f vy;
  vec3f vz;
};

////////////////////////////////////////////////////////////////////////////////
/// Constructors
////////////////////////////////////////////////////////////////////////////////

inline uniform LinearSpace3f 
make_LinearSpace3f(const uniform vec3f x, const uniform vec3f y, const uniform vec3f z) { 
  uniform LinearSpace3f l; l.vx = x; l.vy = y; l.vz = z; return l; 
}

inline varying LinearSpace3f 
make_LinearSpace3f(const varying vec3f x, const varying vec3f y, const varying vec3f z) { 
  varying LinearSpace3f l; l.vx = x; l.vy = y; l.vz = z; return l; 
}

inline uniform LinearSpace3f make_LinearSpace3f_identity()
{
  return make_LinearSpace3f(make_vec3f(1.f,0.f,0.f),
                            make_vec3f(0.f,1.f,0.f),
                            make_vec3f(0.f,0.f,1.f));
}

inline varying LinearSpace3f make_LinearSpace3f_varying_identity()
{
  const float one = 1.0f;
  return make_LinearSpace3f(make_vec3f(one,0.f,0.f),
                            make_vec3f(0.f,one,0.f),
                            make_vec3f(0.f,0.f,one));
}

////////////////////////////////////////////////////////////////////////////////
// Unary Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform LinearSpace3f neg(const uniform LinearSpace3f l)
{ return make_LinearSpace3f(neg(l.vx),neg(l.vy),neg(l.vz)); }
inline varying LinearSpace3f neg(const varying LinearSpace3f l)
{ return make_LinearSpace3f(neg(l.vx),neg(l.vy),neg(l.vz)); }

/*! compute the determinant of the matrix */
inline uniform float det(const uniform LinearSpace3f l) { return dot(l.vx,cross(l.vy,l.vz)); }
inline varying float det(const varying LinearSpace3f l) { return dot(l.vx,cross(l.vy,l.vz)); }

/*! compute transposed matrix */
inline uniform LinearSpace3f transposed(const uniform LinearSpace3f l) { 
  return make_LinearSpace3f(make_vec3f(l.vx.x,l.vy.x,l.vz.x),
                            make_vec3f(l.vx.y,l.vy.y,l.vz.y),
                            make_vec3f(l.vx.z,l.vy.z,l.vz.z));
}
inline varying LinearSpace3f transposed(const varying LinearSpace3f l) { 
  return make_LinearSpace3f(make_vec3f(l.vx.x,l.vy.x,l.vz.x),
                            make_vec3f(l.vx.y,l.vy.y,l.vz.y),
                            make_vec3f(l.vx.z,l.vy.z,l.vz.z));
}

/*! compute adjoint matrix */
inline uniform LinearSpace3f adjoint(const uniform LinearSpace3f l) { 
  return transposed(make_LinearSpace3f(cross(l.vy,l.vz),cross(l.vz,l.vx),cross(l.vx,l.vy))); 
}
inline varying LinearSpace3f adjoint(const varying LinearSpace3f l) { 
  return transposed(make_LinearSpace3f(cross(l.vy,l.vz),cross(l.vz,l.vx),cross(l.vx,l.vy))); 
}

/*! calculates orthogonal coordinate frame with z-vector pointing towards N */
inline uniform LinearSpace3f frame(const uniform vec3f N) 
{
  const uniform vec3f dx0 = make_vec3f(0.0f,N.z,-N.y);
  const uniform vec3f dx1 = make_vec3f(-N.z,0.0f,N.x);
  const uniform vec3f dx = normalize(abs(N.x) < abs(N.y) ? dx0 : dx1);
  const uniform vec3f dy = cross(N,dx);
  return make_LinearSpace3f(dx,dy,N);
}

inline varying LinearSpace3f frame(const varying vec3f N) 
{
  const varying vec3f dx0 = make_vec3f(0.0f,N.z,-N.y);
  const varying vec3f dx1 = make_vec3f(-N.z,0.0f,N.x);
  const varying vec3f dx = normalize(abs(N.x) < abs(N.y) ? dx0 : dx1);
  const varying vec3f dy = cross(N,dx);
  return make_LinearSpace3f(dx,dy,N);
}

////////////////////////////////////////////////////////////////////////////////
/// Binary Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform LinearSpace3f add(const uniform LinearSpace3f a, const uniform LinearSpace3f b) { return make_LinearSpace3f((a.vx+b.vx), (a.vy+b.vy), (a.vz+b.vz)); }
inline varying LinearSpace3f add(const varying LinearSpace3f a, const varying LinearSpace3f b) { return make_LinearSpace3f((a.vx+b.vx), (a.vy+b.vy), (a.vz+b.vz)); }

inline uniform LinearSpace3f sub(const uniform LinearSpace3f a, const uniform LinearSpace3f b) { return make_LinearSpace3f((a.vx-b.vx), (a.vy-b.vy), (a.vz-b.vz)); }
inline varying LinearSpace3f sub(const varying LinearSpace3f a, const varying LinearSpace3f b) { return make_LinearSpace3f((a.vx-b.vx), (a.vy-b.vy), (a.vz-b.vz)); }

#if 0
inline uniform vec3f         mul(const uniform LinearSpace3f l, const uniform vec3f v) { return add(mul(v.x,l.vx), mul(v.y,l.vy), mul(v.z,l.vz)); }
inline varying vec3f         mul(const uniform LinearSpace3f l, const varying vec3f v) { return add(mul(v.x,l.vx), mul(v.y,l.vy), mul(v.z,l.vz)); }
inline varying vec3f         mul(const varying LinearSpace3f l, const varying vec3f v) { return add(mul(v.x,l.vx), mul(v.y,l.vy), mul(v.z,l.vz)); }

inline uniform LinearSpace3f mul(const uniform float         a, const uniform LinearSpace3f b) { return make_LinearSpace3f(mul(a,b.vx), mul(a,b.vy), mul(a,b.vz)); }
inline uniform LinearSpace3f mul(const uniform LinearSpace3f a, const uniform float         b) { return make_LinearSpace3f(mul(a.vx,b), mul(a.vy,b), mul(a.vz,b)); }
inline uniform LinearSpace3f mul(const uniform LinearSpace3f a, const uniform LinearSpace3f b) { return make_LinearSpace3f(mul(a,b.vx), mul(a,b.vy), mul(a,b.vz)); }

inline varying LinearSpace3f mul(const varying float         a, const varying LinearSpace3f b) { return make_LinearSpace3f(mul(a,b.vx), mul(a,b.vy), mul(a,b.vz)); }
inline varying LinearSpace3f mul(const varying LinearSpace3f a, const varying float         b) { return make_LinearSpace3f(mul(a.vx,b), mul(a.vy,b), mul(a.vz,b)); }
inline varying LinearSpace3f mul(const varying LinearSpace3f a, const varying LinearSpace3f b) { return make_LinearSpace3f(mul(a,b.vx), mul(a,b.vy), mul(a,b.vz)); }
#endif

inline uniform vec3f xfmVector(const uniform LinearSpace3f l, const uniform vec3f v)
{ return v.x*l.vx + v.y*l.vy + v.z*l.vz; }
inline varying vec3f xfmVector(const uniform LinearSpace3f l, const varying vec3f v) 
{ return v.x*l.vx + v.y*l.vy + v.z*l.vz; }
inline varying vec3f xfmVector(const varying LinearSpace3f l, const varying vec3f v) 
{ return v.x*l.vx + v.y*l.vy + v.z*l.vz; }

////////////////////////////////////////////////////////////////////////////////
/// Comparison Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform bool eq(const uniform LinearSpace3f a, const uniform LinearSpace3f b) { return eq(a.vx,b.vx) & eq(a.vy,b.vy) & eq(a.vz,b.vz); }
inline varying bool eq(const varying LinearSpace3f a, const varying LinearSpace3f b) { return eq(a.vx,b.vx) & eq(a.vy,b.vy) & eq(a.vz,b.vz); }

inline uniform bool ne(const uniform LinearSpace3f a, const uniform LinearSpace3f b) { return ne(a.vx,b.vx) | ne(a.vy,b.vy) | ne(a.vz,b.vz); }
inline varying bool ne(const varying LinearSpace3f a, const varying LinearSpace3f b) { return ne(a.vx,b.vx) | ne(a.vy,b.vy) | ne(a.vz,b.vz); }

////////////////////////////////////////////////////////////////////////////////
// Unary Operators
////////////////////////////////////////////////////////////////////////////////


inline uniform vec3f operator*(const uniform LinearSpace3f l, const uniform vec3f v)
{ return (v.x*l.vx) + (v.y*l.vy) + (v.z*l.vz); }
inline varying vec3f operator*(const uniform LinearSpace3f l, const varying vec3f v)
{ return (v.x*l.vx) + (v.y*l.vy) + (v.z*l.vz); }
inline varying vec3f operator*(const varying LinearSpace3f l, const varying vec3f v)
{ return (v.x*l.vx) + (v.y*l.vy) + (v.z*l.vz); }



inline uniform LinearSpace3f operator*(const uniform float         a, 
                                       const uniform LinearSpace3f b)
{ return make_LinearSpace3f((a*b.vx), (a*b.vy), (a*b.vz)); }
inline uniform LinearSpace3f operator*(const uniform LinearSpace3f a, 
                                       const uniform float         b) 
{ return make_LinearSpace3f((a.vx*b), (a.vy*b), (a.vz*b)); }
inline uniform LinearSpace3f operator*(const uniform LinearSpace3f a, 
                                       const uniform LinearSpace3f b)
{ return make_LinearSpace3f((a*b.vx), (a*b.vy), (a*b.vz)); }

inline varying LinearSpace3f operator*(const varying float         a, 
                                       const varying LinearSpace3f b)
{ return make_LinearSpace3f((a*b.vx), (a*b.vy), (a*b.vz)); }
inline varying LinearSpace3f operator*(const varying LinearSpace3f a, 
                                       const varying float         b)
{ return make_LinearSpace3f((a.vx*b), (a.vy*b), (a.vz*b)); }
inline varying LinearSpace3f operator*(const varying LinearSpace3f a, 
                                       const varying LinearSpace3f b)
{ return make_LinearSpace3f((a*b.vx), (a*b.vy), (a*b.vz)); }



/*! compute inverse matrix */
inline uniform LinearSpace3f rcp(const uniform LinearSpace3f l) 
{ return adjoint(l)*rcpf(det(l)); }
inline varying LinearSpace3f rcp(const varying LinearSpace3f l) 
{ return adjoint(l)*rcpf(det(l)); }

/*! short-hand name for LinearSpace3f */
typedef LinearSpace3f linear3f;



////////////////////////////////////////////////////////////////////////////////
// Rudimentary 2D linear space, used for texture coordinate transformations
////////////////////////////////////////////////////////////////////////////////

struct LinearSpace2f 
{
  vec2f vx;
  vec2f vy;
};

inline uniform LinearSpace2f make_LinearSpace2f(const uniform vec2f x, const uniform vec2f y) { 
  uniform LinearSpace2f l;
  l.vx = x;
  l.vy = y;
  return l; 
}

inline varying LinearSpace2f make_LinearSpace2f(const varying vec2f x, const varying vec2f y) { 
  varying LinearSpace2f l;
  l.vx = x;
  l.vy = y;
  return l; 
}

inline uniform LinearSpace2f make_LinearSpace2f_identity()
{
  return make_LinearSpace2f(make_vec2f(1.f, 0.f),
                            make_vec2f(0.f, 1.f));
}


inline uniform vec2f operator*(const uniform LinearSpace2f l, const uniform vec2f v) {
  return v.x * l.vx + v.y * l.vy;
}

inline varying vec2f operator*(const uniform LinearSpace2f l, const varying vec2f v) {
  return v.x * l.vx + v.y * l.vy;
}

inline varying vec2f operator*(const varying LinearSpace2f l, const varying vec2f v) {
  return v.x * l.vx + v.y * l.vy;
}


/*! short-hand name for LinearSpace2f */
typedef LinearSpace2f linear2f;
