// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "vec.ih"
#include "sobol.ih"

///////////////////////////////////////////////////////////////////////////////
// Hash functions

inline unsigned int MurmurHash3_mix(unsigned int hash, unsigned int k)
{
  const unsigned int c1 = 0xcc9e2d51;
  const unsigned int c2 = 0x1b873593;
  const unsigned int r1 = 15;
  const unsigned int r2 = 13;
  const unsigned int m = 5;
  const unsigned int n = 0xe6546b64;

  k *= c1;
  k = (k << r1) | (k >> (32 - r1));
  k *= c2;

  hash ^= k;
  hash = ((hash << r2) | (hash >> (32 - r2))) * m + n;

  return hash;
}

inline unsigned int MurmurHash3_finalize(unsigned int hash)
{
  hash ^= hash >> 16;
  hash *= 0x85ebca6b;
  hash ^= hash >> 13;
  hash *= 0xc2b2ae35;
  hash ^= hash >> 16;

  return hash;
}

inline unsigned int hashToRandom(unsigned int value, unsigned int scramble)
{
  value = (value ^ 61) ^ scramble;
  value += value << 3;
  value ^= value >> 4;
  value *= 0x27d4eb2d;
  return value;
}

///////////////////////////////////////////////////////////////////////////////
// Utility functions

inline float CranleyPattersonRotation(float x, float dx)
{
  x += dx;
  if (x >= 1.f)
    x -= 1.f;

  return x;
}

inline vec2f CranleyPattersonRotation(vec2f v, vec2f dv)
{
  const float x = CranleyPattersonRotation(v.x, dv.x);
  const float y = CranleyPattersonRotation(v.y, dv.y);

  return make_vec2f(x, y);
}

inline float radicalInverse(uint32 idx, const uint32 base)  
{
  float f = 0.f, g = 1.0f, inv = 1.0f/base;

  while (idx > 0) {
    g *= inv;
    f += (idx % base) * g;
    idx /= base;
  }

  return f;
}

// specialized version for base 2
inline float radicalInverse2(uint32 idx)
{
  float f = 0.f, g = 1.0f;

  while (idx > 0) {
    g *= 0.5f;
    f += idx & 1 ? g : 0.f;
    idx >>= 1;
  }

  return f;
}

////////////////////V///////////////////////////////////////////////////////////
// PCG pseudo-random number generator http://www.pcg-random.org/

typedef unsigned int uint32_t;
typedef unsigned int64 uint64_t;

struct RandomSampler {
  uint64_t state;
  uint64_t stream;
};

inline uint32_t RandomSampler__pcg32(varying RandomSampler* uniform self)
{
  uint64_t oldstate = self->state;
  self->state = oldstate * 6364136223846793005ULL + (self->stream|1u);
  uint32_t xorshifted = ((oldstate >> 18u) ^ oldstate) >> 27u;
  uint32_t rot = oldstate >> 59u;
  return (xorshifted >> rot) | (xorshifted << ((-rot) & 31));
}

inline float RandomSampler_getFloat(varying RandomSampler* uniform self) 
{
  return ldexp((double)RandomSampler__pcg32(self), -32);
}

inline void RandomSampler_init(varying RandomSampler* uniform self,
                               uint64_t seed, 
                               uint64_t stream) 
{
  self->state = 0;
  self->stream = (stream << 1u) | 1u;

  // hash seed to reduce correlation artefacts
  self->state = MurmurHash3_mix(self->state, seed);
  self->state = MurmurHash3_finalize(self->state);

  RandomSampler__pcg32(self);
  self->state += seed;
  RandomSampler__pcg32(self);
}

inline void RandomSampler_init(varying RandomSampler* uniform self,
                               uint64_t seed) 
{
  RandomSampler_init(self, seed, 0);
}

///////////////////////////////////////////////////////////////////////////////
// TEA - Random numbers based on Tiny Encryption Algorithm

inline void tea8(unsigned int& v0, unsigned int& v1)
{
  unsigned int sum = 0;

  for(uniform int i = 0; i < 8; i++) { // just 8 instead of 32 rounds
    sum += 0x9e3779b9;
    v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + sum) ^ ((v1 >> 5) + 0xc8013ea4);
    v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + sum) ^ ((v0 >> 5) + 0x7e95761e);
  }
}

struct RandomTEA
{
  unsigned int v0, v1;
};

inline void RandomTEA__Constructor(varying RandomTEA* uniform this,
                                   const unsigned int idx,
                                   const unsigned int seed)
{
  this->v0 = idx;
  this->v1 = seed;
}

inline varying vec2f RandomTEA__getFloats(varying RandomTEA* uniform this) { 
  tea8(this->v0, this->v1);
  const float tofloat = 2.3283064365386962890625e-10f; // 1/2^32
  return make_vec2f(this->v0 * tofloat, this->v1 * tofloat);
}


///////////////////////////////////////////////////////////////////////////////
// LCG - Linear Congruential Generator

inline unsigned int LCG_init(unsigned int pixelID, unsigned int sampleIndex)
{
  unsigned int state = 0;
  state = MurmurHash3_mix(state, pixelID);
  state = MurmurHash3_mix(state, sampleIndex);
  state = MurmurHash3_finalize(state);
  return state;
}

inline unsigned int LCG_next(unsigned int value)
{
  const unsigned int m = 1664525;
  const unsigned int n = 1013904223;

  return value * m + n;
}

inline float LCG_getFloat(unsigned int& state)
{
  state = LCG_next(state);
  return to_float_unorm(state);
}

inline vec2f LCG_getFloat2(unsigned int& state)
{
  const float x = LCG_getFloat(state);
  const float y = LCG_getFloat(state);
  return make_vec2f(x, y);
}

inline vec3f LCG_getFloat3(unsigned int& state)
{
  const float x = LCG_getFloat(state);
  const float y = LCG_getFloat(state);
  const float z = LCG_getFloat(state);
  return make_vec3f(x, y, z);
}


////////////////////////////////////////////////////////////////////////////////
// Low-discrepancy (Sobol) sampler

struct LDSampler
{
  unsigned int index;    // sample index
  unsigned int scramble; // random number for scrambling the samples
  unsigned int lcg;      // LCG used when we run out of dimensions
};

inline void LDSampler_init(varying LDSampler* uniform self, 
                           unsigned int pixelID, 
                           unsigned int sampleIndex) 
{
  // skip the first few samples to reduce correlation artifacts
  self->index = sampleIndex + 64; 

  unsigned int hash = 0;
  hash = MurmurHash3_mix(hash, pixelID);
  self->scramble = MurmurHash3_finalize(hash);

  hash = MurmurHash3_mix(hash, sampleIndex);
  self->lcg = MurmurHash3_finalize(hash);
}

inline float LDSampler_getFloat(varying LDSampler* uniform self, 
                                uniform unsigned int dimension)
{
  if (dimension >= Sobol_numDimensions)
    return LCG_getFloat(self->lcg);

  // Sample the Sobol sequence
  const float s = Sobol_sample(self->index, dimension);

  // Apply Cranley-Patterson rotation to reduce correlation artifacts
  const float shift = to_float_unorm(hashToRandom(dimension, self->scramble));
  return CranleyPattersonRotation(s, shift);
}

inline vec2f LDSampler_getFloat2(varying LDSampler* uniform self, 
                                 uniform unsigned int dimension)
{
  const float x = LDSampler_getFloat(self, dimension);
  const float y = LDSampler_getFloat(self, dimension+1);
  return make_vec2f(x, y);
}

///////////////////////////////////////////////////////////////////////////////
// Hammersley - low discrepancy random numbers; only two dimensions; no state

inline varying vec2f RandomHammersley2__getFloats(varying unsigned int idx) {
  return make_vec2f(rcp((float)idx), radicalInverse2(idx));
}

///////////////////////////////////////////////////////////////////////////////
// halton - low discrepancy halton sequence; first two dimensions; no state

inline varying vec2f HaltonSequence_get2D(varying unsigned int idx) {
  return make_vec2f(radicalInverse2(idx),radicalInverse(idx,3));
}
