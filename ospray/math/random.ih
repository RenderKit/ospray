// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#define TABLE_SIZE 32
#define WARMUP_ITERATIONS 7

struct Random
{
  int seed;
  int state;
  int table[TABLE_SIZE];
};

///////////////////////////////////////////////////////////////////////////////
// uniform Random

inline void Random__setSeed(uniform Random* uniform this, const uniform int s)
{
  const uniform int a = 16807; 
  const uniform int m = 2147483647;
  const uniform int q = 127773;
  const uniform int r = 2836;
  
  if (s == 0) this->seed = 1;
  else this->seed = s & 0x7FFFFFFF;
  
  for (uniform int j = TABLE_SIZE+WARMUP_ITERATIONS; j >= 0; j--) 
  {
    uniform int k = this->seed / q;
    this->seed = a*(this->seed - k*q) - r*k;
    this->seed = this->seed & 0x7FFFFFFF;
    if (j < TABLE_SIZE) this->table[j] = this->seed;
  }
  this->state = this->table[0];
}

inline void Random__Constructor(uniform Random* uniform this, const uniform int seed/* = 27*/) 
{
  Random__setSeed(this,seed);
}

inline uniform int Random__getInt(uniform Random* uniform this)
{
  const uniform int a = 16807;
  const uniform int m = 2147483647;
  const uniform int q = 127773;
  const uniform int r = 2836;
  const uniform int f = 1 + 2147483647 / TABLE_SIZE;
  
  uniform int k = this->seed / q;
  this->seed = a*(this->seed - k*q) - r*k;
  this->seed = this->seed & 0x7FFFFFFF;
  uniform int j = min(this->state / f, TABLE_SIZE-1);
  this->state = this->table[j];
  this->table[j] = this->seed;
  return this->state;
}

inline uniform int Random__getInt (uniform Random* uniform this, uniform int limit) { 
  return Random__getInt(this) % limit; 
}

inline uniform float Random__getFloat (uniform Random* uniform this) { 
  return min(Random__getInt(this) / 2147483647.0f, 1.0f);
} 

///////////////////////////////////////////////////////////////////////////////
// varying Random

inline void Random__setSeed(varying Random* uniform this, const varying int s)
{
  const varying int a = 16807;
  const varying int m = 2147483647;
  const varying int q = 127773;
  const varying int r = 2836;
  
  if (s == 0) this->seed = 1;
  else this->seed = s & 0x7FFFFFFF;
  
  for (uniform int j = TABLE_SIZE+WARMUP_ITERATIONS; j >= 0; j--) 
  {
    varying int k = this->seed / q;
    this->seed = a*(this->seed - k*q) - r*k;
    this->seed = this->seed & 0x7FFFFFFF;
    if (j < TABLE_SIZE) this->table[j] = this->seed;
  }
  this->state = this->table[0];
}

inline void Random__Constructor(varying Random* uniform this, const int seed/* = 27*/) 
{
  Random__setSeed(this,seed);
}

inline varying int Random__getInt(varying Random* uniform this)
{
  const varying int a = 16807;
  const varying int m = 2147483647UL;
  const varying int q = 127773;
  const varying int r = 2836;
  const varying int f = 1 + 2147483647UL / TABLE_SIZE;
  
  varying int k = this->seed / q;
  this->seed = a*(this->seed - k*q) - r*k;
  this->seed = this->seed & 0x7FFFFFFF;
  varying int j = min(this->state / f, TABLE_SIZE-1);
  this->state = this->table[j];
  this->table[j] = this->seed;
  return this->state;
}

inline varying int Random__getInt (varying Random* uniform this, varying int limit) { 
  return Random__getInt(this) % limit; 
}

inline varying float Random__getFloat (varying Random* uniform this) { 
  return min(Random__getInt(this) / 2147483647.0f, 1.0f);
} 


///////////////////////////////////////////////////////////////////////////////
// TEA - Random numbers based on Tiny Encryption Algorithm

inline void tea8(unsigned int& v0, unsigned int& v1)
{
  unsigned int sum = 0;

  for(uniform int i = 0; i < 8; i++) { // just 8 instead of 32 rounds
    sum += 0x9e3779b9;
    v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + sum) ^ ((v1 >> 5) + 0xc8013ea4);
    v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + sum) ^ ((v0 >> 5) + 0x7e95761e);
  }
}

struct RandomTEA
{
  unsigned int v0, v1;
};

inline void RandomTEA__Constructor(varying RandomTEA* uniform this,
                                   const unsigned int idx,
                                   const unsigned int seed)
{
  this->v0 = idx;
  this->v1 = seed;
}

inline varying vec2f RandomTEA__getFloats(varying RandomTEA* uniform this) { 
  tea8(this->v0, this->v1);
  const float tofloat = 2.3283064365386962890625e-10f; // 1/2^32
  return make_vec2f(this->v0 * tofloat, this->v1 * tofloat);
}


///////////////////////////////////////////////////////////////////////////////
// Utility functions

inline float CranleyPattersonRotation(float x, float dx)
{
  x += dx;
  if (x >= 1.f)
    x -= 1.f;

  return x;
}

inline vec2f CranleyPattersonRotation(vec2f v, vec2f dv)
{
  const float x = CranleyPattersonRotation(v.x, dv.x);
  const float y = CranleyPattersonRotation(v.y, dv.y);

  return make_vec2f(x, y);
}

inline float radicalInverse(uint32 idx, const uint32 base)  
{
  float f = 0.f, g = 1.0f, inv = 1.0f/base;

  while (idx > 0) {
    g *= inv;
    f += (idx % base) * g;
    idx /= base;
  }

  return f;
}

// specialized version for base 2
inline float radicalInverse2(uint32 idx)
{
  float f = 0.f, g = 1.0f;

  while (idx > 0) {
    g *= 0.5f;
    f += idx & 1 ? g : 0.f;
    idx >>= 1;
  }

  return f;
}


///////////////////////////////////////////////////////////////////////////////
// Hammersley - low discrepancy random numbers; only two dimensions; no state

inline varying vec2f RandomHammersley2__getFloats(varying unsigned int idx) {
  return make_vec2f(rcp((float)idx), radicalInverse2(idx));
}
