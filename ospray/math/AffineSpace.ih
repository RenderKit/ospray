// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "LinearSpace.ih"

/*! A Affine vector space; i.e., a Linear Space with a translation */
struct AffineSpace3f {
  LinearSpace3f l;
  vec3f         p;
};

/*! create a new affine space from given basis vectors v{x,y,z} and translation p */
inline uniform AffineSpace3f make_AffineSpace3f(const uniform vec3f vx,
                                                const uniform vec3f vy,
                                                const uniform vec3f vz,
                                                const uniform vec3f p)
{ 
  uniform AffineSpace3f xfm;
  xfm.l.vx = vx;
  xfm.l.vy = vy;
  xfm.l.vz = vz;
  xfm.p    = p;
  return xfm;
}

/*! apply given affine transformation to given _point_ v */
inline uniform vec3f xfmPoint(const uniform AffineSpace3f a, const uniform vec3f v)
{ return a.p + xfmVector(a.l, v); }

/*! apply given affine transformation to given _point_ v */
inline varying vec3f xfmPoint(const uniform AffineSpace3f a, const varying vec3f v) 
{ return a.p + xfmVector(a.l, v); }

/*! apply given affine transformation to given _point_ v */
inline varying vec3f xfmPoint(const varying AffineSpace3f a, const varying vec3f v) 
{ return a.p + xfmVector(a.l, v); }

/*! apply affine transform to given _vector_ v, i.e., _without_ the translation */
inline uniform vec3f xfmVector(const uniform AffineSpace3f a, const uniform vec3f v)
{ return xfmVector(a.l, v); }

/*! apply affine transform to given _vector_ v, i.e., _without_ the translation */
inline varying vec3f xfmVector(const uniform AffineSpace3f a, const varying vec3f v) 
{ return xfmVector(a.l, v); }

/*! apply affine transform to given _vector_ v, i.e., _without_ the translation */
inline varying vec3f xfmVector(const varying AffineSpace3f a, const varying vec3f v) 
{ return xfmVector(a.l, v); }

/*! short-hand name for AffineSpace3f */
typedef AffineSpace3f affine3f;



////////////////////////////////////////////////////////////////////////////////
// Rudimentary 2D affine space, used for texture coordinate transformations
////////////////////////////////////////////////////////////////////////////////

/*! A 2D Affine vector space; i.e., a Linear Space with a translation */
struct AffineSpace2f {
  LinearSpace2f l;
  vec2f         p;
};

/*! create a new affine space from given basis vectors v{x,y,z} and translation p */
inline uniform AffineSpace2f make_AffineSpace2f(const uniform LinearSpace2f l,
                                                const uniform vec2f p)
{ 
  uniform AffineSpace2f xfm;
  xfm.l = l;
  xfm.p = p;
  return xfm;
}

inline uniform AffineSpace2f make_AffineSpace2f(const uniform vec2f vx,
                                                const uniform vec2f vy,
                                                const uniform vec2f p)
{ 
  return make_AffineSpace2f(make_LinearSpace2f(vx, vy), p);
}

inline uniform AffineSpace2f make_AffineSpace2f_identity()
{
  return make_AffineSpace2f(make_vec2f(1.f, 0.f),
                            make_vec2f(0.f, 1.f),
                            make_vec2f(0.f));
}


inline uniform vec2f operator*(const uniform AffineSpace2f a, const uniform vec2f v)
{ return a.l * v + a.p; }

inline varying vec2f operator*(const uniform AffineSpace2f a, const varying vec2f v) 
{ return a.l * v + a.p; }

inline varying vec2f operator*(const varying AffineSpace2f a, const varying vec2f v) 
{ return a.l * v + a.p; }

/*! short-hand name for AffineSpace3f */
typedef AffineSpace2f affine2f;

inline void out(uniform affine3f a) 
{ 
  print("Affine3f(");
  out(a.l.vx);
  out(a.l.vy);
  out(a.l.vz);
  out(a.p);
  print(")");
}

