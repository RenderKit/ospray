// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

// input: importance in 'cdf'
// output: cdf of importance in 'cdf'
//         return sum
uniform float Distribution1D_create(const uniform int size, uniform float* uniform cdf);

struct Sample1D {
  int idx; // relative to start
  float frac;
  float pdf;
};

inline Sample1D Distribution1D_sample(
  const uniform int size,
  const uniform float* uniform cdf,
  // we may sample different rows within one gang: use a varying offset 'start' instead of a varying pointer 'cdf'
  const int start,
  const float s)
{
  // find minimum index where cdf[i-1] <= s < cdf[i]
  int first = start;
  int len = size;

  while (len > 0) {
    const int half = len >> 1;
    const int mid = first + half;
    if (s < cdf[mid]) {
      len = half;
    } else {
      first = mid + 1;
      len -= half + 1;
    }
  }

  Sample1D ret;
  ret.idx = first - start;
  const float bef = first == start ? 0.0f : cdf[first-1];
  const float dcdf = cdf[first] - bef;
  ret.pdf = dcdf * size;
  ret.frac = (s - bef) * rcp(dcdf); // rescale

  return ret;
}
