// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "Geometry.ih"
#include "common/Data.ih"
#include "math/AffineSpace.ih"
#include "render/Renderer.ih"

struct GeometricModel
{
  Geometry *geom;

  Data1D color;
  Data1D localIndex;  // index into local color/materials

  Data1D rendererMaterialIndex;  // index into materials on the renderer

  int32 numMaterials;
  Material **material;

  float areaPDF;
};

inline Material *GeometricModel_getMaterial(const GeometricModel *uniform self,
                                            const Renderer *uniform renderer,
                                            int32 primID)
{
  uniform int32 numMaterials = self->numMaterials;
  Material **uniform mats    = self->material;

  if (valid(self->rendererMaterialIndex) && renderer->material) {
    primID = get_uint32(self->rendererMaterialIndex,
                        min(primID, self->rendererMaterialIndex.numItems - 1));

    mats         = renderer->material;
    numMaterials = renderer->numMaterials;
  } else if (valid(self->localIndex)) {
    primID =
        get_uint8(self->localIndex, min(primID, self->localIndex.numItems - 1));
  }

  if (mats)
    return mats[min(primID, numMaterials - 1)];
  else
    return NULL;
}

inline void GeometricModel_postIntersect(const GeometricModel *uniform self,
                                         const Renderer *uniform renderer,
                                         varying DifferentialGeometry &dg,
                                         const varying Ray &ray,
                                         uniform int64 flags)
{
  Geometry *uniform geom = self->geom;

  geom->postIntersect(geom, dg, ray, flags);

  dg.areaPDF = self->areaPDF;

  uint32 idx = ray.primID;
  if (valid(self->localIndex)) {
    idx = get_uint8(self->localIndex,
                    min(ray.primID, self->localIndex.numItems - 1));
  }

  if (flags & DG_COLOR && valid(self->color))
    dg.color = get_vec4f(self->color, min(idx, self->color.numItems - 1));

  dg.material = GeometricModel_getMaterial(self, renderer, ray.primID);
}
