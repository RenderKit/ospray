// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "../common/DifferentialGeometry.ih"
#include "../common/Ray.ih"
#include "math/AffineSpace.ih"

// embree
#include "embree3/rtcore.isph"

struct Geometry;

/*! Geometries are supposed to fill certain members of DifferentialGeometry:
    calculate Ng, Ns, st, color, and materialID if the respective bit DG_NG,
    DG_NS, DG_TEXCOORD, DG_COLOR, and DG_MATERIALID, in flags is set.
    Important with instancing: P and ray are in world-coordinates, whereas Ng
    and Ns are in object-coordinates and transformed to world-space by
    Instance_postIntersect.
    World::postIntersect already set the hit point P, color, geometry, and
    material before, and handles normalization/faceforwarding
    (DG_NORMALIZE/DG_FACEFORWARD) after Geometry_postIntersectFct is called.
    Thus the material pointer only needs to be set if different to
    geometry->material, or the color when different to vec4f(1.0f).
*/
typedef void (*Geometry_postIntersectFct)(const Geometry *uniform self,
    varying DifferentialGeometry &dg,
    const varying Ray &ray,
    uniform int64 flags);

struct SampleAreaRes
{
  vec3f pos; //!< sampled point, in world-space
  vec3f normal; //!< geometry normal Ng at the sampled point
};

typedef void (*Geometry_GetAreasFct)(const Geometry *const uniform,
    const int32 *const uniform primIDs //!< primitive IDs
    ,
    const uniform int32 numPrims //!< number of primitives
    ,
    const uniform affine3f &xfm //!< instance transformation (obj2world)
    ,
    float *const uniform areas //!< array to return area per primitive
                               // in world-space
);

// sample the given primitive uniformly wrt. area
typedef SampleAreaRes (*Geometry_SampleAreaFct)(const Geometry *const uniform,
    const int32 primID //!< primitive to sample
    ,
    const uniform affine3f &xfm //!< instance transformation (obj2world)
    ,
    const uniform affine3f &rcp_xfm //!< inverse transformation (world2obj)
    ,
    const vec2f &s //!< random numbers to generate the sample
);

/*! ispc-side equivalent of a geometry */
struct Geometry
{
  /*! 'virtual' post-intersect function that fills in a
    DifferentialGeometry struct, see above prototype for details */
  Geometry_postIntersectFct postIntersect;

  Geometry_GetAreasFct getAreas;
  Geometry_SampleAreaFct sampleArea;

  //! pointer back to the C++-equivalent of this class
  void *cppEquivalent;

  //! number of primitives this geometry has
  int32 numPrimitives;
};

inline void Geometry_setEmbreeUserGeometry(Geometry *uniform self,
    RTCGeometry geom,
    uniform RTCBoundsFunction bounds,
    uniform RTCIntersectFunctionN intersect,
    uniform RTCOccludedFunctionN occluded)
{
  rtcSetGeometryUserData(geom, self);
  rtcSetGeometryUserPrimitiveCount(geom, self->numPrimitives);
  rtcSetGeometryBoundsFunction(geom, bounds, self);
  rtcSetGeometryIntersectFunction(geom, intersect);
  rtcSetGeometryOccludedFunction(geom, occluded);
  rtcCommitGeometry(geom);
}

//! constructor for ispc-side Geometry object
void Geometry_Constructor(Geometry *uniform geometry,
    void *uniform cppEquivalent,
    uniform Geometry_postIntersectFct postIntersect);
