// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "../common/Material.ih"
#include "../common/Ray.ih"
#include "../common/DifferentialGeometry.ih"
#include "math/AffineSpace.ih"

/*! Geometries are supposed to fill certain members of DifferentialGeometry:
    calculate Ng, Ns, st, color, and materialID if the respective bit DG_NG,
    DG_NS, DG_TEXCOORD, DG_COLOR, and DG_MATERIALID, in flags is set.
    Important with instancing: P and ray are in world-coordinates, whereas Ng
    and Ns are in object-coordinates and transformed to world-space by
    Instance_postIntersect.
    Model::postIntersect already set the hit point P, color, geometry, and
    material before, and handles normalization/faceforwarding
    (DG_NORMALIZE/DG_FACEFORWARD) after Geometry_postIntersectFct is called.
    Thus the material pointer only needs to be set if different to
    geometry->material, or the color when different to vec4f(1.0f).
*/
typedef void (*Geometry_postIntersectFct)(uniform Geometry *uniform self,
                                          uniform Model *uniform model,
                                          varying DifferentialGeometry &dg,
                                          const varying Ray &ray,
                                          uniform int64 flags);

struct SampleAreaRes
{
  vec3f pos;    //!< sampled point, in world-space
  vec3f normal; //!< geometry normal Ng at the sampled point
};

typedef int32 (*Geometry_GetMaterialIDFct)(
    const Geometry *const uniform
    , const int32 primID //!< primitive to query
    );

typedef void (*Geometry_GetAreasFct)(
    const Geometry *const uniform
    , const int32 *const uniform primIDs //!< primitive IDs
    , const uniform int32 numPrims //!< number of primitives
    , const uniform affine3f &xfm //!< instance transformation (obj2world)
    , float *const uniform areas //!< array to return area per primitive
    // in world-space
    );

// sample the given primitive uniformly wrt. area
typedef SampleAreaRes (*Geometry_SampleAreaFct)(
    const Geometry *const uniform
    , const int32 primID //!< primitive to sample
    , const uniform affine3f &xfm //!< instance transformation (obj2world)
    , const uniform affine3f &rcp_xfm //!< inverse transformation (world2obj)
    , const vec2f& s //!< random numbers to generate the sample
    );

/*! ispc-side equivalent of a geometry */
struct Geometry {
  /*! 'virtual' post-intersect function that fills in a
    DifferentialGeometry struct, see above prototype for details */
  Geometry_postIntersectFct postIntersect;

  Geometry_GetMaterialIDFct getMaterialID;
  Geometry_GetAreasFct getAreas;
  Geometry_SampleAreaFct sampleArea;

  //! pointer back to the C++-equivalent of this class
  void *uniform cppEquivalent;

  //! number of primitives this geometry has
  uniform int32 numPrimitives;

  //! material list attached to this geometry
  Material *uniform *uniform materialList;

  //! model that this geometry is part of
  Model *uniform model;

  //! ID that 'model' knows this geometry under
  uniform int32 geomID;
};

//! constructor for ispc-side Geometry object
extern void Geometry_Constructor(uniform Geometry *uniform geometry,
                                 void *uniform cppEquivalent,
                                 uniform Geometry_postIntersectFct postIntersect,
                                 uniform Model *uniform model,
                                 uniform int32  geomID,
                                 uniform Material *uniform *uniform materialList);
